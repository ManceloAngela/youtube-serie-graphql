schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

type Absence {
  attachment: Attachment
  comments: Thread
  description: String
  durationInMinutes: Int
  finishDate: Date
  finishTime: Time
  guid: ID
  id: ID
  profile: Profile
  startDate: Date
  startTime: Time
  status: AbsenceStatus
  type: AbsenceType
  viewerCanChangeStatus: Boolean
  viewerCanEdit: Boolean
}

input AbsenceAttachmentInput {
  objectId: ID
}

input AbsenceDeleteInput {
  id: ID!
}

input AbsenceInput {
  attachment: AbsenceAttachmentInput
  """
  Comments to be inserted alongside the absence. Ignored when updating.
  """
  comments: [CommentInput!]
  description: String
  finishDate: Date!
  finishTime: Time!
  """
  Required when updating.
  """
  id: ID
  """
  The profile associated with this absence. Required when creating.
  """
  profileId: ID
  startDate: Date!
  startTime: Time!
  status: AbsenceStatus
  type: AbsenceType!
}

"""

"""
enum AbsenceStatus {
  """
  Aprovado
  """
  APPROVED
  """
  Pendente
  """
  PENDING
  """
  Recusado
  """
  REJECTED
}

type AbsenceStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: AbsenceStatus
}

"""

"""
enum AbsenceType {
  """
  Abonada
  """
  ABONADA
  """
  Comparecimento em Juízo
  """
  APPEARANCE_IN_COURT
  """
  Doação de Sangue
  """
  BLOOD_DONATION
  """
  Convocação para testemunho
  """
  CALL_FOR_TESTIFY
  """
  Convocação Mesário
  """
  ELECTION_ENLISTMENT
  """
  Vestibular
  """
  ENTRANCE_EXAM
  """
  Trabalho em casa
  """
  HOME_OFFICE
  """
  Casamento
  """
  MARRIAGE
  """
  Consulta Médica de Gestante
  """
  MEDICAL_APPOINTMENT_PREGNANCY
  """
  Consulta Médica de Filho
  """
  MEDICAL_APPOINTMENT_SON
  """
  Serviço Militar
  """
  MILLITARY_SERVICE
  """
  Não Justificada
  """
  NO_REASON
  """
  Outros
  """
  OTHER
  """
  Doença
  """
  SICKNESS
  """
  Nascimento de Filho
  """
  SONS_BIRTH
  """
  Paralisação
  """
  STRIKE
  """
  Testemunho
  """
  TESTIFY
  """
  Acidente de trabalho
  """
  WORK_ACCIDENT
  """
  Comparecimento à Justiça do Trabalho
  """
  WORK_JUSTICE
}

type AbsenceTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: AbsenceType
}

type AbsentDependent {
  nonexistent: Boolean
}

"""
Representa um documento que a pessoa não possui.
"""
type AbsentDocument {
  nonexistent: Boolean
}

"""

"""
enum AccessLevel {
  """
  Contador
  """
  ACCOUNTANT
  """
  DP
  """
  DP
  """
  Usuário do Looker
  """
  LOOKER_USER
  """
  Gestor
  """
  MANAGER
  """
  Administrador Xerpa
  """
  ROOT
  """
  Usuário
  """
  USER
}

type AccessLevelDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: AccessLevel
}

"""
Informations about roles
"""
type Account {
  """
  All the roles inside a company
  """
  allRolesInCompany(companyId: ID): [Role]
  """
  Main role in a company
  """
  role(companyId: ID): Role
  """
  All main roles inside each company an account
  """
  roles: [Role]
}

type Address {
  address1: String
  address2: String
  addrtype: StreetType
  city: City
  cityId: ID
  district: String
  id: ID
  number: String
  zipcode: String
}

input AddressInput {
  address1: String
  address2: String
  addrtype: StreetType
  cityId: ID
  district: String
  number: String
  zipcode: String!
}

type AdjustmentEntries {
  datetime: NaiveDatetimeUsec
  id: ID
}

interface AggregationBucket {
  id: ID
  name: String
}

type AggregationBucketMissing implements AggregationBucket {
  id: ID
  name: String
}

type ApiToken {
  company: Company
  description: String
  id: ID
  insertedAt: NaiveDatetimeUsec
  token: String
}

input ApiTokenInput {
  companyId: ID!
  description: String!
}

type Attachment {
  name: String
  objectId: String
  rawUrl: String
  thumbnail(height: Int, width: Int): Thumbnail
}

"""

"""
enum AttachmentUploadAction {
  DELETE
  NONE
  UPSERT
}

union Attachments = BitmapAttachment | PdfAttachment

input AttributeValue {
  id: String!
  """
  Este campo deve ser usado para valor unico
  """
  value: String
  """
  Utilize esse campo para gravar multiplos valores
  """
  values: [String]
}

type AvatarPayload {
  profile: Profile
}

input AvatarUpsertInput {
  """
  Nome do arquivo.
  """
  filename: String
  """
  GUID do perfil do usuário.
  """
  profileId: ID!
  """
  URL do arquivo.
  """
  url: String!
}

type Bank {
  """
  O código do banco.
  """
  code: String
  """
  ID do banco.
  """
  id: ID
  """
  O nome do banco.
  """
  name: String
}

type BankAccount {
  """
  O número da conta bancária.
  """
  account: String
  """
  O tipo da conta bancária.
  """
  accountType: BankAccountType
  """
  O número da agência.
  """
  agency: String
  """
  Banco da conta bancária
  """
  bank: Bank
  """
  ID da conta bancária.
  """
  id: ID
  """
  A conta principal.
  """
  mainAccount: Boolean
  """
  A conta bancária é do tipo xerpay.
  """
  mainXerpayAccount: Boolean
  """
  A conta salário principal.
  """
  salaryMainAccount: Boolean
}

"""

"""
enum BankAccountType {
  """
  Conta Corrente
  """
  CHECKING
  """
  Conta Salário
  """
  SALARY
  """
  Conta Poupança
  """
  SAVINGS
  """
  Conta Conjunta
  """
  SHARED
}

type BankAccountTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: BankAccountType
}

input BankAccountUpsertInput {
  account: String
  accountType: BankAccountType
  agency: String
  bankId: ID
  id: ID
  mainAccount: Boolean
  mainXerpayAccount: Boolean
  profileId: ID!
  salaryMainAccount: Boolean
}

type BankAccountUpsertPayload {
  bankAccount: BankAccount
  profile: Profile
}

input BankInput {
  code: String
  name: String
}

type Batch {
  """
  ID da importação.
  """
  batchJobId: ID
  """
  ID da empresa.
  """
  companyId: ID
  """
  Data em que a movimentação em massa foi criada.
  """
  insertedAt: NaiveDatetimeUsec
  status: BatchStatus
  """
  Status da movimentação em massa.
  """
  statusString: String
  """
  Tipo da movimentação em massa.
  """
  type: BatchType
}

"""

"""
enum BatchStatus {
  """
  Erro
  """
  ERROR
  """
  Successo
  """
  PROCESSED
  """
  Processando
  """
  PROCESSING
  """
  Successo
  """
  SUCCESS
}

type BatchStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: BatchStatus
}

"""

"""
enum BatchType {
  """
  Test 123
  """
  BULK_IMPORT
  """
  Importação de colaboradores btg
  """
  IMPORT_COLAB_BTG
  """
  Importação de colaboradores novos
  """
  IMPORT_COLAB_DEF
  """
  Revisão Salarial
  """
  SALARY_UPDATE
}

type BatchTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: BatchType
}

"""

"""
enum BatchTypeEtl {
  """
  Modelo BTG Importacao e Atualizacao em massa Xerpay
  """
  IMPORT_COLAB_BTG
  """
  Importacao em massa Xerpay
  """
  IMPORT_COLAB_CFS
  """
  Modelo DEF Importacao e Atualizacao em massa Xerpay
  """
  IMPORT_COLAB_DEF
  """
  Liberacao em massa Xerpay
  """
  RELEASE_COLAB_CFS
  """
  Suspensao em massa Xerpay
  """
  SUSPEND_COLAB_CFS
  """
  Atualizacao em massa Xerpay
  """
  UPDATE_COLAB_CFS
}

input BenefitsInput {
  childCares: [ID]
  dentalInsurances: [ID]
  healthInsurances: [ID]
  lifeInsurances: [ID]
  mealAllowances: [ID]
  transports: [ID]
}

type Billing {
  history: [PaymentHistoryEntry]
  payment: Payment
  plan: XerpaPlan
  planIdentifier: String
}

type BitmapAttachment {
  etag: String
  height: Int
  id: String
  mime: String
  mtime: Datetime
  name: String
  type: String
  url: String
  width: Int
}

type BusinessContact {
  branch: String
  email: String
  mobile: String
  phone: String
  profile: Profile
  updatedContacts: [ContactType]
}

input BusinessContactInput {
  branch: String
  email: String
  mobile: String
  phone: String
  profileId: ID!
}

type BusinessUnit implements ObjectWithExternalAssociations {
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  partner: Partner
}

input BusinessUnitInput {
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String!
  partner: PartnerInput
}

type CampoReclamacao {
  codTipo: Int
  descricao: String
  item: ItemLista
  tipo: String
}

type Cbo {
  code: String
  id: ID
  name: String
}

type ChildCare {
  discountPercentage: Int
  id: ID
  name: String
}

type City {
  id: ID
  name: String
  state: State
}

scalar Cnpj

input CnpjDelete {
  companyId: ID!
  guid: ID!
}

input CnpjInput {
  cnpj: Cnpj
  companyId: ID!
  """
  Obrigatorio quando for atualizacao
  """
  guid: ID
  """
  Razao social
  """
  legalName: String!
  """
  Nome da empresa
  """
  name: String!
  """
  Parceiro
  """
  partner: PartnerInput
}

type Comment {
  author: PublicProfile
  id: ID
  insertedAt: Datetime
  message: String
  thread: Thread
}

input CommentDeleteInput {
  id: ID!
  thread: ID!
}

"""
A comment without a thread, used when inserting the comment alongside the
commented object.
"""
input CommentInput {
  message: String!
}

input CommentInsertInput {
  message: String!
  thread: ID!
}

type Company {
  apiTokens: [TokenDescription]
  benefits: CompanyBenefits
  billing: Billing
  businessUnits: [BusinessUnit]
  cnpj: Cnpj
  cnpjs: [CompanyCnpj]
  costCenters: [CostCenter]
  customDocuments: [CustomDocument]
    @deprecated(reason: "Use `document_templatings instead.`")
  customEmail(emailType: EmailType!): CompanyCustomEmail
  customFields: [CustomFieldsConfiguration]
  customIntegrationExport(id: ID!): CustomIntegrationExport
  customization: CompanyCustomization
  department(id: ID!): Department
  departments: [Department]
  documentTemplatings: [DocumentTemplating]
  dominioExport(id: ID!): DefaultIntegrationExport
    @deprecated(
      reason: "Use integrationExport field instead with type DOMINIO."
    )
  externalAssociations: CompanyExternalAssociations
  features: [String]
  guid: ID
  hasAutomaticTimeClockImport: Boolean
  hasSentPaystubs: Boolean
  id: ID
  integrationExport(id: ID!, type: IntegrationType!): DefaultIntegrationExport
  integrations: [CompanyIntegration]
  isAccountant: Boolean
  kits: [Kit] @deprecated(reason: "To be removed")
  lastTimeclockImport: NaiveDatetimeUsec
  legalName: String
  name: String
  offices: [Office]
  paystubCapabilities: [PaystubCapabilityInfo]
  positions: [Position]
  profile(id: ID!): Profile @deprecated(reason: "use root profile query")
  profileSearch(query: String!): ProfileSearchResult
  profileSearchAggregation(query: String!): [SearchAggregation]
  providers: [CompanyProvider]
  satConfiguration: SatRotasConfigurationStatus
  satRotasJustificationTree: SatRotasJustificationTree
  statistics: Statistics
  unions: [Union]
  viewerCanAdminister: Boolean
  viewerCanCensus: Boolean
  viewerCanImport: Boolean
  viewerCanInvite: Boolean
  viewerCanViewAbsences: Boolean
  viewerCanViewBilling: Boolean
  viewerCanViewDashboards: Boolean
  viewerCanViewInsights: Boolean
  viewerCanViewOffboardings: Boolean
  viewerCanViewOnboardings: Boolean
  viewerCanViewPaystubs: Boolean
  viewerCanViewRootFeatures: Boolean
  viewerCanViewStatistics: Boolean
  viewerCanViewUsers: Boolean
  viewerCanViewVacations: Boolean
  viewerCanViewWorkPeriods: Boolean
  visualizationRoles: [VisualizationRole]
  webhooks: [Webhook]
  workPeriod(id: ID!): WorkPeriod
  workPeriodConfig: WorkPeriodConfig
  workPeriods: [WorkPeriodListView]
  workloads: [Workload]
}

input CompanyAccessInput {
  companyId: Int!
  profileIds: [ID]!
  profileStatus: ProfileStatus
  role: AccessLevel
}

type CompanyAccessPayload {
  batchJobId: Int
}

type CompanyBenefits {
  childCares: [ChildCare]
  dentalInsurances: [DentalInsurance]
  healthInsurances: [HealthInsurance]
  lifeInsurances: [LifeInsurance]
  mealAllowances: [MealAllowance]
  transports: [Transport]
}

type CompanyCnpj {
  cnpj: Cnpj
  guid: ID
  id: ID
  """
  Razao social
  """
  legalName: String
  """
  Nome da empresa
  """
  name: String
  partner: Partner
}

type CompanyCustomEmail {
  """
  Id da empresa
  """
  companyId: Int
  """
  Tipo de email
  """
  emailType: EmailType
  """
  Nome do layout customizado
  """
  layoutName: String
  """
  Nome do template customizado
  """
  templateName: String
}

input CompanyCustomEmailInput {
  """
  Id da empresa
  """
  companyId: Int!
  """
  Tipo de email
  """
  emailType: EmailType!
  """
  Nome do layout customizado
  """
  layoutName: String
  """
  Nome do template customizado
  """
  templateName: String
}

type CompanyCustomization {
  coverImageUrl: String
  loginBackgroundImageUrl: String
  logoImageUrl: String
  primaryColor: String
  secondaryColor: String
}

type CompanyExternalAssociations {
  dimepKairos: DimepKairosCompanyExternalAssociations
  dominio: DominioCompanyExternalAssociations
  pontomais: PontomaisCompanyExternalAssociations
}

input CompanyExternalAssociationsInput {
  dimepKairos: DimepKairosCompanyExternalAssociationsInput
  dominio: DominioCompanyExternalAssociationsInput
  pontomais: PontomaisCompanyExternalAssociationsInput
}

"""

"""
enum CompanyFeature {
  """
  Ausências
  """
  ABSENCES
  """
  Insights
  """
  INSIGHTS
  """
  Desligamentos
  """
  OFFBOARDS
  """
  Admissão
  """
  ONBOARDING
  """
  Holerite
  """
  PAYSTUB
  """
  Relatórios
  """
  REPORTS
  """
  Histórico de salários
  """
  SALARIES_HISTORY
  """
  Ponto
  """
  TIME_AND_ATTENDANCE
  """
  Férias
  """
  VACATION
  """
  Xerpay
  """
  XERPAY
}

type CompanyFeatureDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: CompanyFeature
}

input CompanyInput {
  externalAssociations: CompanyExternalAssociationsInput
}

interface CompanyIntegration {
  """
  Whether this integration is configured for this company or not
  """
  active: Boolean
  associableFields: [IntegrationField]
  company: Company
  counts: IntegrationCount
  description: String
  fields: [IntegrationField] @deprecated(reason: "Use associableFields instead")
  name: String
  type: IntegrationType
}

input CompanyIntegrationInput {
  companyId: ID!
  type: IntegrationType!
}

"""
Representa um company provider. Um serviço externo plugado ao sistema com o objetivo de realizar de um determinado processo de negocio.
"""
type CompanyProvider {
  """
  Empresa
  """
  company: Company
  """
  Status da integração
  """
  connectionStatus: ProviderConnectionStatus
  """
  Flag habilitado?
  """
  enabled: Boolean
  """
  Identificador unico
  """
  guid: ID
  """
  Nome do provider
  """
  name: CompanyProviderName
  """
  Lista de parametros específicos desse provider
  """
  settings: [CompanyProviderSettings]
  """
  Tipo do provider
  """
  type: CompanyProviderType
}

"""

"""
enum CompanyProviderName {
  DOCUSIGN
}

type CompanyProviderNameDescription {
  value: CompanyProviderName
}

"""
Representa os parametros específicos do provider
"""
type CompanyProviderSettings {
  """
  Identidicador unico
  """
  id: ID
  """
  Nome do parametro
  """
  name: String
  """
  Flag valor protegido. Valores protegidos são exibidos apenas os ultimos 4 caracteres
  """
  protected: Boolean
  """
  Valor do parametro
  """
  value: String
}

input CompanyProviderSetttingsUpdateInput {
  """
  Identificador unico
  """
  id: ID!
  """
  Valor do parametro
  """
  value: String!
}

"""

"""
enum CompanyProviderType {
  GENERATING_AND_SIGNING_DOCUMENTS
}

type CompanyProviderTypeDescription {
  value: CompanyProviderType
}

input CompleteProfileInformationInput {
  admissionDate: Date!
  departmentId: ID
  managersIds: [ID!]
  officeId: ID!
  profileId: ID!
  username: String
  workloadId: ID!
}

type Completion {
  completion: CompletionType
  name: String
}

"""

"""
enum CompletionType {
  """
  Completo
  """
  COMPLETE
  """
  Incompleto
  """
  INCOMPLETE
}

"""

"""
enum ConfigurationType {
  BENEFITS
}

type ConfigurationTypeDescription {
  value: ConfigurationType
}

type Constant {
  code: String
  label: String
  name: String
}

type Contact {
  id: ID
  label: NotificationContactLabel
  profile: Profile
  type: ContactType
  value: String
  verificationStatus: VerificationStatus
  verified: Boolean
}

type ContactPreference {
  contact: Contact
  id: ID
  topic: NotificationTopicType
}

"""

"""
enum ContactType {
  """
  Email
  """
  EMAIL
  """
  SMS
  """
  MOBILE
  """
  WhatsApp
  """
  WHATSAPP
}

type ContactTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: ContactType
}

input ContactVerificationInput {
  code: String!
  contactId: ID!
}

type Contents {
  texts: [String]
  title: String
}

type CostCenter implements ObjectWithExternalAssociations {
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  partner: Partner
}

input CostCenterInput {
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String!
  partner: PartnerInput
}

type Country {
  code: String
  id: ID
  name: String
}

input CreateBatchJobInput {
  companyId: Int!
  csvSourceUrl: String!
  headers: Boolean
  importType: BatchType!
  s3Url: String
}

type CreateBatchJobPayload {
  batchJobId: Int
}

input CreateCostCenterInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  name: String!
}

input CreateDepartmentInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  name: String!
}

input CreateUnionInput {
  abbreviation: String
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  name: String!
}

input CreateWorkloadInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  name: String!
  schedule: WorkloadScheduleInput!
}

type CustomCompanyIntegration implements CompanyIntegration {
  active: Boolean
  associableFields: [IntegrationField]
  company: Company
  counts: IntegrationCount
  customIntegration: CustomIntegration
  description: String
  fields: [IntegrationField]
  name: String
  type: IntegrationType
}

type CustomDocument {
  attachment: Attachment
  id: ID
  name: String
}

type CustomDocumentSubmission {
  customDocuments: [CustomDocument]
  id: ID
  insertedAt: NaiveDatetimeUsec
  kits: [Kit]
  status: CustomDocumentSubmissionStatus
}

"""

"""
enum CustomDocumentSubmissionStatus {
  """
  Baixou os documents
  """
  DOWNLOADED
  """
  Erro
  """
  ERROR
  """
  Recebeu e abriu
  """
  OPENED
  """
  Processando
  """
  PROCESSING
  """
  Recebeu e não abriu
  """
  RECEIVED
}

type CustomDocumentSubmissionStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: CustomDocumentSubmissionStatus
}

"""

"""
enum CustomFieldAttributeType {
  """
  Anexo
  """
  ATTACHMENT
  """
  Checkbox
  """
  CHECKBOX
  """
  Data
  """
  DATE
  """
  Lista
  """
  LIST
  """
  Multi Select
  """
  MULTI_SELECT
  """
  Numero
  """
  NUMBER
  """
  Radio
  """
  RADIO
  """
  Texto
  """
  TEXT
}

type CustomFieldAttributeTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: CustomFieldAttributeType
}

"""
Representa o valor de um input
"""
type CustomFieldsAttributeValue {
  """
  Texto de Descrição (opcional)
  """
  description: String
  """
  Campo editável?
  """
  editable: Boolean
  """
  Id
  """
  id: ID
  """
  Nome do campo
  """
  name: String
  """
  Lista de opções associados
  """
  options: [CustomFieldsOptions]
  """
  Ordem de exibição
  """
  order: Int
  """
  Campo obrigatório?
  """
  required: Boolean
  """
  Lista de opções selecionadas
  """
  selectedValues: [CustomFieldsOptionSelected]
  """
  Tipo
  """
  type: CustomFieldAttributeType
  """
  Valor
  """
  value: String
}

"""
Representa os campos(inputs) de um formulário personalizado
"""
type CustomFieldsAttributes {
  """
  Texto de Descrição (opcional)
  """
  description: String
  """
  Campo editável?
  """
  editable: Boolean
  """
  Id
  """
  id: ID
  """
  Nome do campo
  """
  name: String
  """
  Lista de opções associados
  """
  options: [CustomFieldsOptions]
  """
  Ordem de exibição
  """
  order: Int
  """
  Campo obrigatório?
  """
  required: Boolean
  """
  Tipo do campo
  """
  type: CustomFieldAttributeType
}

input CustomFieldsAttributesUpsertInput {
  description: String
  editable: Boolean
  id: ID
  name: String!
  options: [CustomFieldsOptionsUpsertInput]
  order: Int!
  required: Boolean!
  type: CustomFieldAttributeType!
}

"""
Representa um agrupamento de campos personalizados
"""
type CustomFieldsClass {
  """
  Lista de campos associados
  """
  attributes: [CustomFieldsAttributes]
  """
  Texto de Confirmação (opcional)
  """
  confirmation: String
  """
  Texto de Descrição (opcional)
  """
  description: String
  """
  Id
  """
  id: ID
  """
  Nome do agrupamento
  """
  name: String
  """
  Ordem de exibição
  """
  order: Int
}

input CustomFieldsClassUpsertInput {
  attributes: [CustomFieldsAttributesUpsertInput!]!
  confirmation: String
  description: String
  id: ID
  name: String!
  order: Int!
}

"""
Representa um formulário de campos personalizados da empresa
"""
type CustomFieldsConfiguration {
  """
  Numero de perfis associados a esse formulário
  """
  associatedProfileCount: Int
  """
  Lista de agrupamentos associados
  """
  classes: [CustomFieldsClass]
  """
  Id
  """
  id: ID
  """
  Nome do formulário
  """
  name: String
  """
  Nome sem espaços separado por '-'
  """
  nameSlug: String
  """
  Ordem de exibição
  """
  position: Int
  """
  Tipo de Configuracao
  """
  type: ConfigurationType
}

input CustomFieldsConfigurationDeleteInput {
  companyId: Int!
  id: ID!
}

input CustomFieldsConfigurationUpsertInput {
  classes: [CustomFieldsClassUpsertInput!]!
  companyId: ID!
  id: ID
  name: String!
  position: Int
  type: ConfigurationType
}

"""
Representa uma instância de um formulário personalizado
"""
type CustomFieldsInstance {
  """
  Lista de valores
  """
  attributeValues: [CustomFieldsAttributeValue]
  """
  Id da classe
  """
  classId: ID
  """
  Id da configuração
  """
  configurationId: ID
  """
  Nome da configuração
  """
  configurationName: String
  """
  Slug da configuração
  """
  configurationNameSlug: String
  """
  Ordem configuração
  """
  configurationOrder: Int
  """
  Tipo da configuração
  """
  configurationType: ConfigurationType
  """
  Texto de confirmação
  """
  confirmation: String
  """
  Texto de Descrição (opcional)
  """
  description: String
  """
  Id
  """
  id: ID
  """
  Nome da classe
  """
  name: String
  """
  Slug da classe
  """
  nameSlug: String
  """
  Ordem de exibição
  """
  order: Int
}

"""
Representa uma opção(radio/check-box/multi-select) selecionada
"""
type CustomFieldsOptionSelected {
  """
  Id da opção
  """
  id: ID
  """
  valor da opção
  """
  value: String
}

"""
Representa as opções(radio/check-box/multi-select) de um campo em um formulário personalizado
"""
type CustomFieldsOptions {
  """
  Id
  """
  id: ID
  """
  Nome da opção
  """
  name: String
  """
  Ordem de exibição
  """
  order: Int
  """
  Texto do tooltip
  """
  tooltip: String
}

input CustomFieldsOptionsUpsertInput {
  id: ID
  name: String!
  order: Int!
  tooltip: String!
}

input CustomFieldsProfileInput {
  attributeValues: [AttributeValue!]!
  profileGuid: ID!
}

type CustomIntegration {
  company: Company
  fields: [CustomIntegrationField]
  id: ID
}

input CustomIntegrationAssociationInput {
  customIntegrationId: ID!
  value: String!
}

type CustomIntegrationExport implements IntegrationExport {
  associableFields: [IntegrationField]
    @deprecated(reason: "Use integration { associableFields } instead.")
  customIntegration: CustomIntegration
  filePath: String
  id: ID
  incompleteProfiles: [IncompleteProfile]
  integration: CompanyIntegration
  profiles: [Profile]
}

input CustomIntegrationExportInput {
  companyId: ID
  customIntegration: CustomIntegrationInput
  id: ID
  profileGuids: [ID!]
  query: String
}

type CustomIntegrationField {
  category: CustomIntegrationFieldCategory
  name: String
  selected: Boolean
  type: CustomIntegrationFieldType
}

type CustomIntegrationFieldCategory {
  name: String
  type: CustomIntegrationFieldCategoryType
}

"""

"""
enum CustomIntegrationFieldCategoryType {
  """
  Dados contratuais
  """
  CONTRACTUAL_DATA
  """
  Outros
  """
  OTHER
  """
  Dados pessoais
  """
  PERSONAL_DATA
  """
  Dados trabalhistas
  """
  WORK_DATA
}

"""

"""
enum CustomIntegrationFieldType {
  """
  Nível de acesso
  """
  ACCESS
  """
  Contato profissional
  """
  BUSINESS_CONTACT
  """
  Certificado de Reservista
  """
  CAM
  """
  Carteira de Habilitação
  """
  CNH
  """
  Dados contratuais
  """
  CONTRACTUAL_DATA
  """
  Carteira de Trabalho
  """
  CTPS
  """
  Campos customizados
  """
  CUSTOM
  """
  Identificação
  """
  IDENTIFICATION
  """
  Gestores
  """
  MANAGERS
  """
  Contato pessoal
  """
  PERSONAL_CONTACT
  """
  PIS
  """
  PIS
  """
  Endereço residencial
  """
  RESIDENTIAL_ADDRESS
  """
  RG/CPF
  """
  RG_CPF
  """
  Cartão SUS
  """
  SUS
  """
  Contribuição sindical
  """
  UNION_FEE
  """
  Título de Eleitor
  """
  VOTER
}

input CustomIntegrationInput {
  fields: [CustomIntegrationFieldType]!
  id: ID
}

type CustomizationUrl {
  tempImageUrl: String
}

type DanglingPis {
  paginationToken: ID
  pis: ID
}

"""
Date in the format described by ISO 8601.
"""
scalar Date

type DateTime {
  date: Date
  time: Time
}

type DateTimeEntry {
  end: DateTime
  start: DateTime
}

input DateTimeEntryInput {
  end: DateTimeInput
  start: DateTimeInput
}

input DateTimeInput {
  date: Date
  time: Time
}

"""
ISO8601 datetime
"""
scalar Datetime

type Day {
  adjustmentEntries: [AdjustmentEntries]
  date: Date
  id: ID
  originalEntries: [OriginalEntries]
  overtime: Overtime
  types: [DayType]
}

"""

"""
enum DayType {
  DAYOFF
  DSR
  HOLIDAY
  VACATION
  WORKDAY
}

type DayTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: DayType
}

type DefaultCompanyIntegration implements CompanyIntegration {
  active: Boolean
  associableFields: [IntegrationField]
  company: Company
  counts: IntegrationCount
  description: String
  fields: [IntegrationField]
  name: String
  type: IntegrationType
}

type DefaultIntegrationExport implements IntegrationExport {
  dependentsFilePath: String
  fields: [IntegrationField]
    @deprecated(reason: "Use integration { associableFields } instead.")
  filePath: String
  id: ID
  incompleteProfiles: [IncompleteProfile]
  integration: CompanyIntegration
  """
  List of profiles that cannot be exported due to some reason. This may change when a profile is altered.
  """
  nonExportableProfiles: [Profile]
  profiles: [Profile]
  renapseBankFilePath: String
}

type DeleteCompanyCustomEmailResult {
  message: String
}

type DentalInsurance {
  id: ID
  name: String
  plan: String
  provider: String
  totalCost: Money
}

type Department implements AggregationBucket & ObjectWithExternalAssociations {
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  partner: Partner
}

input DepartmentInput {
  """
  Required when creating
  """
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  """
  Required when updating
  """
  id: ID
  name: String!
  partner: PartnerInput
}

type Dependent {
  birthday: Date
  dependent: DependentsFields
  dependentType: DependentType
  gender: Gender
  healthInsuranceDependent: Boolean
  id: Int
  mothersName: String
  name: String
  taxDependent: Boolean
}

type DependentAttachments {
  alimony: Attachment
  birthCertificate: Attachment
  cpf: Attachment
  dependentOtherImage: Attachment
  disabilityStatement: Attachment
  marriageCertificate: Attachment
  rg: Attachment
  schoolFrequency: Attachment
  susCard: Attachment
  vaccinationCard: Attachment
}

input DependentAttributes {
  alimony: Boolean
  collegeStudent: Boolean
  cpfNumber: String
  hasDisabilityStatement: Boolean
  hasVaccinationCard: Boolean
  images: ImagesAttachments
  maritalStatus: MaritalStatusType
  regularlyAttendingSchool: Boolean
  susNumber: String
}

input DependentDeleteInput {
  id: ID!
  profileId: ID!
}

input DependentInput {
  birthday: Date
  dependent: DependentAttributes
  dependentType: DependentType
  gender: Gender
  healthInsuranceDependent: Boolean
  id: ID
  mothersName: String
  name: String
  profileId: ID
  taxDependent: Boolean
}

"""

"""
enum DependentType {
  """
  Filho
  """
  CHILD
  """
  Pai
  """
  FATHER
  """
  Mãe
  """
  MOTHER
  """
  Outro
  """
  OTHER
  """
  Parceiro em união estável
  """
  PARTNER
  """
  Cônjuge
  """
  SPOUSE
}

type DependentTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: DependentType
}

type DependentsFields {
  alimony: Boolean
  collegeStudent: Boolean
  cpfNumber: String
  hasDisabilityStatement: Boolean
  hasVaccinationCard: Boolean
  images: DependentAttachments
  maritalStatus: MaritalStatusType
  regularlyAttendingSchool: Boolean
  susNumber: String
}

type DetalhesTransporte {
  cartao: String
  codLinha: String
  codTransporte: Int
  descricao: String
  operadora: String
  tipo: String
  valor: String
}

type DimepKairosCompanyExternalAssociations {
  password: String
  username: String
}

input DimepKairosCompanyExternalAssociationsInput {
  password: String
  username: String
}

"""

"""
enum Disabilities {
  """
  Auditiva
  """
  HEARING
  """
  Intelectual
  """
  INTELLECTUAL
  """
  Mental
  """
  MENTAL
  """
  Múltipla
  """
  MULTIPLE
  """
  Nenhuma
  """
  NONE
  """
  Física
  """
  PHYSICAL
  """
  Reabilitado
  """
  REHABILITATED
  """
  Fala
  """
  SPEECH
  """
  Visual
  """
  VISUAL
}

type DisabilitiesDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: Disabilities
}

input DismissMessageUpsertInput {
  messageId: ID!
  profileId: ID!
}

input DocumentAttachment {
  action: AttachmentUploadAction! = NONE
  name: String
  url: String
}

"""
Representa o Certificado de Alistamento Militar (CAM) de uma pessoa.
"""
type DocumentCam {
  """
  Anexos do CAM
  """
  attachments: DocumentCamAttachments
  """
  Categoria Militar (Ex: 3a Categoria).
  """
  category: String
  """
  Data de emissão do CAM.
  """
  issueDate: Date
  """
  Órgão expedidor do CAM.
  """
  issuer: String
  """
  O número do CAM
  """
  number: String
  """
  Data de último OCR (Ex: 2000-12-31).
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  Situação Militar (Ex: Dispensado do Serviço Militar inicial em 20/12/2000).
  """
  status: String
  """
  Região Militar (Ex: 2a Região do Comando Militar do Sudeste).
  """
  zone: String
}

type DocumentCamAttachments {
  """
  Imagem frontal do CAM
  """
  frontImage: Attachment
}

input DocumentCamUpsertAttachmentInput {
  frontImage: DocumentAttachment
}

input DocumentCamUpsertInput {
  attachments: DocumentCamUpsertAttachmentInput
  category: String
  issueDate: String
  issuer: String
  nonexistent: Boolean
  number: String
  profileId: ID!
  status: String
  zone: String
}

type DocumentCamUpsertPayload {
  cam: MaybeDocumentCam
  profile: Profile
}

type DocumentCnh {
  attachments: DocumentCnhAttachments
  """
  Categoria da CNH.
  """
  category: String
  """
  Data de Validade da CNH.
  """
  expirationDate: Date
  """
  Data da primeira CNH
  """
  firstIssueDate: Date
  """
  Indica se a validação do documento está em andamento
  """
  isValidationOngoing: Boolean
  """
  Data de emissão da CNH.
  """
  issueDate: Date
  """
  Órgão Emissor
  """
  issuer: String
  nonexistent: Boolean
  """
  Número da CNH.
  """
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  Unidade Federativa.
  """
  state: State
  """
  Estado da verificação dos campos.
  """
  verificationState: DocumentCnhVerificationState
}

type DocumentCnhAttachments {
  frontImage: Attachment
}

type DocumentCnhOcrProgressPayload {
  cnh: DocumentCnh
}

input DocumentCnhOcrRequestInput {
  cnhFrontUrl: String!
  profileGuid: ID!
}

type DocumentCnhOcrRequestPayload {
  ok: Boolean
}

input DocumentCnhUpsertInput {
  attachments: ProfileCnhUpsertAttachmentInput
  category: String
  expirationDate: Date
  firstIssueDate: Date
  issueDate: Date
  issuer: String
  nonexistent: Boolean
  number: String
  profileId: ID!
  scanDate: Date
  scannedFields: [String!]
  stateId: ID
  verificationState: DocumentCnhVerificationStateInput
}

type DocumentCnhUpsertPayload {
  cnh: MaybeCnh
  profile: Profile
}

type DocumentCnhVerificationState {
  category: DocumentFieldVerificationState
  expirationDate: DocumentFieldVerificationState
  issueDate: DocumentFieldVerificationState
  number: DocumentFieldVerificationState
}

input DocumentCnhVerificationStateInput {
  category: DocumentFieldVerificationState!
  expirationDate: DocumentFieldVerificationState!
  issueDate: DocumentFieldVerificationState!
  number: DocumentFieldVerificationState!
}

"""
Representa o CPF de uma pessoa na empresa.
"""
type DocumentCpf {
  """
  Imagem do CPF.
  """
  attachments: DocumentCpfAttachments
  """
  Indica se a validação do documento está em andamento
  """
  isValidationOngoing: Boolean
  """
  O número do CPF.
  """
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  Estado da verificação dos campos.
  """
  verificationState: DocumentCpfVerificationState
}

type DocumentCpfAttachments {
  """
  Imagem da parte frontal do CPF.
  """
  frontImage: Attachment
}

input DocumentCpfUpsertInput {
  attachments: ProfileCpfUpsertAttachmentInput
  number: String
  profileId: ID!
  scanDate: Date
  scannedFields: [String!]
  verificationState: DocumentCpfVerificationStateInput
}

type DocumentCpfUpsertPayload {
  cpf: DocumentCpf
  profile: Profile
}

type DocumentCpfVerificationState {
  number: DocumentFieldVerificationState
}

input DocumentCpfVerificationStateInput {
  number: DocumentFieldVerificationState!
}

type DocumentCtps {
  """
  Anexos da carteira de trabalho
  """
  attachments: DocumentCtpsAttachments
  """
  Data de emissão da carteira de trabalho
  """
  createdAt: String
  """
  Indica quando o usuário não tem carteira de trabalho
  """
  nonexistent: Boolean
  """
  O número da carteira de trabalho
  """
  number: String
  """
  Número do registro no órgão da classe
  """
  registryClassNumber: Int
  """
  Data de vencimento da carteira de trabalho (Ex: 2000-12-31).
  """
  registryDueDate: Date
  """
  Data validade do registro profissional (Ex: 2000-12-31).
  """
  registryExpirationDate: Date
  """
  Data de emissão do registro profissional (Ex: 2000-12-31).
  """
  registryIssueDate: Date
  """
  Órgão emissor do registro profissional
  """
  registryIssuer: String
  """
  Código do UF do registro profissional
  """
  registryState: State
  """
  O número de série da carteira de trabalho
  """
  series: String
  """
  Estado da carteira de trabalho
  """
  state: State
}

type DocumentCtpsAttachments {
  """
  Foto da parte da trás carteira de trabalho
  """
  ctpsBack: Attachment
  """
  Foto do registro do primeiro emprego
  """
  ctpsFirstJob: Attachment
  """
  Foto da parte da frente da carteira de trabalho
  """
  ctpsFront: Attachment
  """
  Foto do registro do último emprego
  """
  ctpsLastJob: Attachment
}

"""

"""
enum DocumentFieldVerificationState {
  """
  Sem informações de validação
  """
  BLANK
  """
  Confirmado pelo colaborador após leitura do documento
  """
  CONFIRMED_BY_USER
  """
  Corrigido pelo colaborador após leitura do documento
  """
  CORRECTED_BY_USER
  """
  Divergente
  """
  DIVERGENT
  """
  Falha de leitura da validação
  """
  OCR_FAILURE
  """
  Verificado pela leitura do documento
  """
  VALIDATED_BY_OCR
}

type DocumentMaritalStatusAttachments {
  frontImage: Attachment
}

type DocumentMaritalStatusCertificate {
  attachments: DocumentMaritalStatusAttachments
  maritalStatus: MaritalStatus
  nonexistent: Boolean
}

input DocumentMaritalStatusUpsertInput {
  attachments: ProfileMaritalStatusUpsertAttachmentInput
  maritalStatus: MaritalStatus
  nonexistent: Boolean
  profileId: ID!
}

type DocumentMaritalStatusUpsertPayload {
  maritalStatus: MaybeMaritalStatusCertificate
  profile: Profile
}

"""
Representa o PIS de uma pessoa na empresa.
"""
type DocumentPis {
  """
  Imagem do PIS.
  """
  attachments: DocumentPisAttachments
  """
  O número do PIS.
  """
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
}

type DocumentPisAttachments {
  """
  Imagem da parte frontal do PIS.
  """
  frontImage: Attachment
}

"""
Representa o RG de uma pessoa na empresa.
"""
type DocumentRg {
  """
  Imagens do RG.
  """
  attachments: DocumentRgAttachments
  """
  A data de vencimento do RG.
  """
  expirationDate: Date
  """
  Indica se a validação do documento está em andamento
  """
  isValidationOngoing: Boolean
  """
  A data que o RG foi emitido.
  """
  issueDate: Date
  """
  O órgão emissor do RG.
  """
  issuer: String
  """
  O número do RG.
  """
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  A Unidade Federativa onde o RG foi emitido.
  """
  state: State
  """
  Estado da verificação dos campos.
  """
  verificationState: DocumentRgVerificationState
}

type DocumentRgAttachments {
  """
  Imagem da parte traseira do RG.
  """
  backImage: Attachment
  """
  Imagem da parte frontal do RG.
  """
  frontImage: Attachment
}

type DocumentRgCpfOcrProgressPayload {
  cpf: DocumentCpf
  rg: DocumentRg
}

input DocumentRgOcrRequestInput {
  profileGuid: ID!
  rgBackUrl: String!
  rgFrontUrl: String!
}

type DocumentRgOcrRequestPayload {
  ok: Boolean
}

input DocumentRgUpsertAttachmentInput {
  backImage: DocumentAttachment
  frontImage: DocumentAttachment
}

input DocumentRgUpsertInput {
  attachments: DocumentRgUpsertAttachmentInput
  issueDate: Date
  issuer: String
  number: String
  profileId: ID!
  scanDate: Date
  scannedFields: [String!]
  stateId: ID
  verificationState: DocumentRgVerificationStateInput
}

type DocumentRgUpsertPayload {
  profile: Profile
  rg: DocumentRg
}

type DocumentRgVerificationState {
  issueDate: DocumentFieldVerificationState
  issuer: DocumentFieldVerificationState
  number: DocumentFieldVerificationState
  stateId: DocumentFieldVerificationState
}

input DocumentRgVerificationStateInput {
  issueDate: DocumentFieldVerificationState!
  issuer: DocumentFieldVerificationState!
  number: DocumentFieldVerificationState!
  stateId: DocumentFieldVerificationState!
}

"""
Representa o Registro Nacional de Estrangeiros de uma pessoa na empresa.
"""
type DocumentRne {
  """
  Anexos do Registro Nacional de Estrangeiros.
  """
  attachments: DocumentRneAttachments
  """
  Filhos no Brasil?
  """
  brazilianChildren: Boolean
  """
  Data de naturalização brasileira.
  """
  brazilianNaturalizationDate: Date
  """
  Cônjuge brasileiro?
  """
  brazilianSpouse: Boolean
  """
  A Classe do Registro Nacional de Estrangeiros.
  """
  class: String
  """
  Número do decreto.
  """
  decreeNumber: String
  """
  A Data de Entrada do Registro Nacional de Estrangeiros.
  """
  entryDate: Date
  """
  A Validade do Registro Nacional de Estrangeiros.
  """
  expiration: Date
  """
  A Data de Expedição do Registro Nacional de Estrangeiros.
  """
  issueDate: Date
  """
  O Emissor do Registro Nacional de Estrangeiros.
  """
  issuer: String
  """
  Naturalizado.
  """
  naturalized: Boolean
  """
  O Número do Registro Nacional de Estrangeiros.
  """
  number: String
  """
  Data de validade do passaporte.
  """
  passportExpirationDate: Date
  """
  Data de emissão do passaporte.
  """
  passportIssueDate: Date
  """
  Número do passaporte.
  """
  passportNumber: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  Tipo de visto.
  """
  visaType: VisaType
}

type DocumentRneAttachments {
  """
  Carta modelo 19.
  """
  letterModel19: Attachment
  """
  Documento do passaporte.
  """
  passportDocument: Attachment
  """
  Imagem frontal do Registro Nacional de Estrangeiros.
  """
  rneFront: Attachment
}

type DocumentSus {
  attachments: DocumentSusAttachments
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
}

type DocumentSusAttachments {
  backImage: Attachment
}

input DocumentSusUpsertInput {
  attachments: ProfileSusUpsertAttachmentInput
  nonexistent: Boolean
  number: String
  profileId: ID!
}

type DocumentSusUpsertPayload {
  profile: Profile
  sus: MaybeSus
}

"""
Template de documento
"""
type DocumentTemplating {
  """
  Id
  """
  id: ID
  """
  Nome do template
  """
  name: String
}

type DocumentTemplatingSubmission {
  companyId: Int
  customDocuments: [CustomDocument]
  id: ID
  insertedAt: NaiveDatetimeUsec
  issuerId: Int
  profileId: Int
  providerName: String
  providerTracking: String
  status: String
}

input DocumentVoterInput {
  attachments: DocumentVoterUpsertAttachmentInput
  nonexistent: Boolean
  """
  Número do título de eleitor
  """
  number: String
  """
  ID do colaborador.
  """
  profileId: ID!
  """
  Seção eleitoral.
  """
  section: String
  """
  ID da Unidade Federativa.
  """
  stateId: ID
  """
  Zona eleitoral.
  """
  zone: String
}

input DocumentVoterUpsertAttachmentInput {
  frontImage: DocumentAttachment
}

type DocumentVoterUpsertPayload {
  profile: Profile
  voter: MaybeVoter
}

type DominioCompanyExternalAssociations {
  branch: String
  id: String
  service: String
  simples: String
}

input DominioCompanyExternalAssociationsInput {
  branch: String
  id: String
  service: String
  simples: String
}

"""
Representa as informações de escolaridade de uma pessoa
"""
type Education {
  """
  Anexo do diploma do curso
  """
  attachments: EducationAttachments
  """
  Data de conclusão do curso
  """
  conclusion: Date
  """
  País da instituição de ensino
  """
  country: String
  """
  Grau do ensino cursado
  """
  degree: SchoolDegreeType
  """
  Duração do curso
  """
  duration: SchoolDurationType
  """
  Campo de estudo
  """
  field: String
  """
  GUID das informações escolares
  """
  id: ID
  """
  Estágiario?
  """
  intern: Boolean
  """
  Área de atuação do estágio
  """
  internshipArea: String
  """
  Cpf do coordenador de estágio
  """
  internshipCoordinatorCpf: String
  """
  Nome do coordenador de estágio
  """
  internshipCoordinatorName: String
  """
  Data prevista para o término do estágio
  """
  internshipEndDate: Date
  """
  Cnpj do coordenador de estágio
  """
  learningInstitutionCnpj: String
  """
  Código da instituição de ensino
  """
  learningInstitutionCode: Int
  """
  Instituição de ensino cursada
  """
  school: String
  """
  Situação atual do curso
  """
  situation: SchoolSituationType
  """
  Estado da instituição de ensino
  """
  state: String
}

type EducationAttachments {
  """
  Diploma/Comprovante de curso
  """
  certificate: Attachment
}

input EducationAttachmentsInput {
  certificate: DocumentAttachment
}

input EducationUpsertInput {
  attachments: EducationAttachmentsInput
  conclusion: Date
  country: String
  degree: SchoolDegreeType
  duration: SchoolDurationType
  field: String
  id: ID
  intern: Boolean
  internshipArea: String
  internshipCoordinatorCpf: String
  internshipCoordinatorName: String
  internshipEndDate: Date
  learningInstitutionCnpj: String
  learningInstitutionCode: Int
  profileId: ID!
  school: String
  situation: SchoolSituationType
  state: String
}

type EducationUpsertPayload {
  education: Education
  profile: Profile
}

scalar Email

"""

"""
enum EmailType {
  """
  Convite de onboarding.
  """
  ONBOARDING_INVITE
  """
  Inscrição realizada com sucesso.
  """
  ONBOARDING_SUCCESSFUL_SIGNUP
  """
  Documentos divergentes.
  """
  ORC_DIVERGENT
  """
  Documentos validados.
  """
  ORC_EVERTHING_VALIDATED
  """
  Documentos ilegíveis.
  """
  ORC_UNREADABLE
}

type EmailTypeDescription {
  value: EmailType
}

type EmergencyContact {
  name: String
  phone: String
  relationship: String
}

input EmergencyContactInput {
  name: String!
  phone: String
  relationship: String
}

"""

"""
enum EmploymentContract {
  """
  Aprendiz
  """
  APPRENTICE
  """
  Autônomo(a)
  """
  AUTONOMOUS
  """
  CLT
  """
  CLT
  """
  Empregado(a) Doméstico(a)
  """
  DOMESTIC
  """
  Contrato por prazo determinado
  """
  FIXED_TERM_CONTRACT
  """
  Indeterminado
  """
  INDETERMINED
  """
  Intermitente
  """
  INTERMITTENT
  """
  Estagiário(a)
  """
  INTERN
  """
  PJ
  """
  PJ
  """
  Sócio(a) - Divisão de Lucros
  """
  PROFIT_SHARING
  """
  Sócio(a) - Pro labore
  """
  PROLABORE
  """
  Estatutário(a)
  """
  STATUTORY
  """
  Temporário(a)
  """
  TEMPORARY
  """
  Voluntário(a)
  """
  VOLUNTEER
}

type EmploymentContractDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: EmploymentContract
}

type EntriesSummary {
  disregardedEntries: [WorkdayEntry!]!
  entryPairs: [EntriesSummaryEntryPair!]!
}

"""
Represents a pair of entries assumed to be the ends (in and out) of an work
interval.

The ends are represented by lists that can be a single entry; multiple
entries, when they are assumed to be duplicates; or be empty, when an entry is
assumed to be missing.
"""
type EntriesSummaryEntryPair {
  in: [WorkdayEntry!]!
  out: [WorkdayEntry!]!
}

type EntryPosition {
  """
  The entries in this position. Can have a single entry; or multiple entries
  if more than one entry is associated with it (possible due to duplication);
  or be empty if there is an expected entry but no entries could be associated
  with it.
  """
  entries: [WorkdayEntry!]!
  """
  The expected entry in this position according to the workload, or null if
  no entry is expected.
  """
  expected: ExpectedEntry
}

type EnumAggregation {
  bucket: Identifier
  count: Int
  key: Constant @deprecated(reason: "use bucket")
}

type EnumDescriptions {
  absenceStatus: [AbsenceStatusDescription]
  absenceType: [AbsenceTypeDescription]
  accessLevel: [AccessLevelDescription]
  bankAccountType: [BankAccountTypeDescription]
  batchStatus: [BatchStatusDescription]
  batchType: [BatchTypeDescription]
  companyFeature: [CompanyFeatureDescription]
  companyProviderName: [CompanyProviderNameDescription]
  companyProviderType: [CompanyProviderTypeDescription]
  configurationType: [ConfigurationTypeDescription]
  contactType: [ContactTypeDescription]
  customDocumentSubmissionStatus: [CustomDocumentSubmissionStatusDescription]
  customFieldAttributeType: [CustomFieldAttributeTypeDescription]
  dayType: [DayTypeDescription]
  dependentType: [DependentTypeDescription]
  disabilities: [DisabilitiesDescription]
  emailType: [EmailTypeDescription]
  employmentContract: [EmploymentContractDescription]
  events: [EventsDescription]
  gender: [GenderDescription]
  maritalStatus: [MaritalStatusDescription]
  mealAllowanceDiscount: [MealAllowanceDiscountDescription]
  mealAllowancePeriodicity: [MealAllowancePeriodicityDescription]
  mealAllowanceType: [MealAllowanceTypeDescription]
  nationality: [NationalityDescription]
  notificationContactLabel: [NotificationContactLabel]
  notificationTopicType: [NotificationTopicTypeDescription]
  paymentMethod: [PaymentMethodDescription]
  paymentStatus: [PaymentStatusDescription]
  paystubCapability: [PaystubCapabilityDescription]
  probationPeriods: [ProbationPeriodsDescription]
  profileAccessSituation: [ProfileAccessSituationDescription]
  profileBenefitStatus: [ProfileBenefitStatusDescription]
  profileStatus: [ProfileStatusDescription]
  providerConnectionStatus: [ProviderConnectionStatusDescription]
  salaryPeriod: [SalaryPeriodDescription]
  skinColor: [SkinColorDescription]
  streetType: [StreetTypeDescription]
  submissionStatusType: [SubmissionStatusTypeDescription]
  templateDayType: [TemplateDayTypeDescription]
  transportType: [TransportTypeDescription]
  verificationStatus: [VerificationStatusDescription]
  visaType: [VisaTypeDescription]
  weekday: [WeekdayDescription]
  workPeriodStatus: [WorkPeriodStatusDescription]
  workdayEntryType: [WorkdayEntryTypeDescription]
  workdayHistoryAction: [WorkdayHistoryActionDescription]
  workdayStatus: [WorkdayStatusDescription]
  workloadType: [WorkloadTypeDescription]
  xerpaPlan: [XerpaPlanDescription]
}

type Error {
  key: String
  msg: String
}

type ErrorMessage {
  description: String
  title: String
}

"""

"""
enum Events {
  """
  Admissão finalizada
  """
  ADMISSION_DONE
  """
  Admissão iniciada manualmente
  """
  ADMISSION_MANUALLY_INVITED
  """
  Admissão iniciada
  """
  ADMISSION_STARTED
  """
  Demissão finalizada
  """
  TERMINATION_DONE
  """
  Demissão iniciada
  """
  TERMINATION_STARTED
}

type EventsDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: Events
}

type ExpectedEntry {
  date: Date!
  time: Time!
}

type ExternalAssociations {
  custom(customIntegrationId: ID!): String
  dominio: String
  totvsRmLabore: String
}

input ExternalAssociationsInput {
  custom: CustomIntegrationAssociationInput
  dominio: String
  totvsRmLabore: String
}

type FilteredWorkPeriod {
  overview: WorkPeriodOverview
  treatment(
    page: Int = 1
    pageSize: Int = 10
    query: String
  ): WorkPeriodFilterResults
}

"""

"""
enum Gender {
  """
  Feminino
  """
  FEMALE
  """
  Masculino
  """
  MALE
  """
  Não especificado
  """
  NONE
}

type GenderDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: Gender
}

type GenerateUploadLinkEtlPayload {
  s3Url: String
  writeUrl: String
}

type GenerateUploadLinkPayload {
  s3Url: String
  writeUrl: String
}

type HasDependents {
  dependents: [Dependent]
}

type Headcount {
  age: [EnumAggregation]
  count: Int
  department: [EnumAggregation]
  educationDegree: [EnumAggregation]
  employmentContract: [EnumAggregation]
  gender: [EnumAggregation]
  maritalStatus: [EnumAggregation]
  skinColor: [EnumAggregation]
  yearMonth: YearMonth
}

type HealthInsurance {
  id: ID
  name: String
  plan: String
  provider: String
}

input HiringDataInput {
  cboId: Int
  companyId: Int!
  companyOfficeId: Int
  employmentContract: EmploymentContract
  managers: [ID]
  overtime: Boolean
  probationPeriodsType: ProbationPeriods
  profileIds: [ID]!
  punchcard: Boolean
  salaryPeriod: SalaryPeriod
  trust: Boolean
  unionId: Int
  workloadId: Int
}

type HiringDataPayload {
  batchJobId: Int
}

interface IPaymentHistoryEntry {
  due: Date
  status: PaymentStatus
}

type Identifier {
  key: ID
  label: String
}

input ImagesAttachments {
  alimony: DocumentAttachment
  birthCertificate: DocumentAttachment
  certificate: DocumentAttachment
  cpf: DocumentAttachment
  dependentOtherImage: DocumentAttachment
  disabilityStatement: DocumentAttachment
  marriageCertificate: DocumentAttachment
  rg: DocumentAttachment
  schoolFrequency: DocumentAttachment
  susCard: DocumentAttachment
  vaccinationCard: DocumentAttachment
}

type ImportFile {
  allStatus: [ImportFileStatus]
  companyGuid: String
  error: String
  id: String
  insertedAt: NaiveDatetimeUsec
  linesError: Int
  linesSuccess: Int
  linesTotal: Int
  status: String
  type: String
  updatedAt: NaiveDatetimeUsec
}

type ImportFileById {
  companyGuid: String
  error: String
  id: String
  importFileLines: [ImportFileLine]
  insertedAt: NaiveDatetimeUsec
  type: String
  updatedAt: NaiveDatetimeUsec
}

type ImportFileLine {
  error: String
  id: String
  line: String
  ownerId: String
  status: String
}

type ImportFileStatus {
  insertedAt: NaiveDatetimeUsec
  status: String
}

type IncompleteProfile {
  incompleteFields: [IntegrationFieldType]
  profile: Profile
}

type IncompleteProfiles {
  results(limit: Int, paginationToken: ID): [WorkPeriodIncompleteProfile]
  totalHits: Int
}

type IntegrationCount {
  associated: Int
  total: Int
}

interface IntegrationExport {
  filePath: String
  id: ID
  incompleteProfiles: [IncompleteProfile]
  integration: CompanyIntegration
  profiles: [Profile]
}

input IntegrationExportInput {
  companyId: ID!
  profileGuids: [ID!]
  query: String
  type: IntegrationType!
}

type IntegrationField {
  counts: IntegrationCount
  incompleteObjects: [ObjectWithExternalAssociations]
  name: String
  type: IntegrationFieldType
}

"""

"""
enum IntegrationFieldType {
  """
  Data de admissão
  """
  ADMISSION_DATE
  """
  Data de nascimento
  """
  BIRTH_DATE
  """
  Unidades de negócio
  """
  BUSINESS_UNIT
  """
  Empresa
  """
  COMPANY
  """
  Centros de custo
  """
  COST_CENTER
  """
  Departamentos
  """
  DEPARTMENT
  """
  CPF
  """
  DOCUMENT_CPF
  """
  Carteira de trabalho
  """
  DOCUMENT_CTPS
  """
  Formação escolar
  """
  EDUCATION
  """
  Nome
  """
  EMPLOYEE_NAME
  """
  Matrícula
  """
  EMPLOYEE_NUMBER
  """
  Regime
  """
  EMPLOYMENT_CONTRACT
  """
  Sexo
  """
  GENDER
  """
  Escritórios
  """
  OFFICE
  """
  Cargos
  """
  POSITION_LEVEL
  """
  Salário
  """
  SALARY
  """
  Tipo de salário
  """
  SALARY_PERIOD
  """
  Sindicatos
  """
  UNION
  """
  Contribuição sindical
  """
  UNION_FEE
  """
  Jornadas
  """
  WORKLOAD
}

type IntegrationStatus {
  insertedAt: NaiveDatetimeUsec
  partnerInsertedAt: NaiveDatetimeUsec
  partnerName: String
  partnerProfileId: String
}

"""

"""
enum IntegrationType {
  """
  Exportação Personalizada
  """
  CUSTOM
  """
  DIMEP Kairos
  """
  DIMEP_KAIROS
  """
  Geração de documentos via DocuSign
  """
  DOCUSIGN
  """
  Exportação Domínio Sistemas
  """
  DOMINIO
  """
  Kenoby
  """
  KENOBY
  """
  Pontomais
  """
  PONTOMAIS
  """
  SAT Rotas Roteirização de Vale Transporte
  """
  SAT_ROTAS
  """
  Exportação TOTVS RM Labore
  """
  TOTVS_RM_LABORE
}

type Invite {
  status: InviteStatus
}

input InviteInput {
  """
  Benefits to be granted to all profiles being invited.
  """
  benefits: BenefitsInput
  companyId: ID!
  """
  Custom fields configurations IDs to be granted to all profiles being invited.
  """
  customFieldsConfigurations: [ID]
  partner: PartnerInput
  profiles: [ProfileInviteInput]!
}

"""

"""
enum InviteStatus {
  """
  Ação Concluída
  """
  DONE
  """
  Erro
  """
  ERROR
  """
  Não enviada
  """
  NOT_SENT
  """
  Lida
  """
  READ
  """
  Recebida
  """
  RECEIVED
  """
  Enviada
  """
  SENT
}

type ItemLista {
  descricao: String
  idItemLista: Int
  tipo: String
}

type JourneyFixedConfig {
  entries: [DateTimeEntry]
  id: ID
}

input JourneyFixedConfigInput {
  entries: [DateTimeEntryInput!]!
  id: ID
}

type JourneyFlexConfig {
  groupId: ID
  id: ID
  intervalsInMinutes: [Int]
  name: String
  workloadBoundaries: WorkloadBoundaries
  workloadInMinutes: Int
}

input JourneyFlexConfigInput {
  id: ID
  intervalsInMinutes: [Int!]
  workloadEndDate: Time!
  workloadInMinutes: Int!
  workloadStartDate: Time!
}

type JourneyNonWorkingDay {
  type: TemplateDayType
}

type JourneyTemplate {
  day0: JourneyTemplateDay
  day1: JourneyTemplateDay
  day2: JourneyTemplateDay
  day3: JourneyTemplateDay
  day4: JourneyTemplateDay
  day5: JourneyTemplateDay
  day6: JourneyTemplateDay
  groupId: ID
  id: ID
  name: String
  type: TemplateDayType
}

union JourneyTemplateDay =
    JourneyFixedConfig
  | JourneyFlexConfig
  | JourneyNonWorkingDay

input JourneyTemplateDayMutation {
  fixed: JourneyFixedConfigInput
  flexible: JourneyFlexConfigInput
  type: TemplateDayType!
}

input JourneyTemplateDeletionInput {
  id: ID!
}

input JourneyTemplateMutationInput {
  day0: JourneyTemplateDayMutation!
  day1: JourneyTemplateDayMutation!
  day2: JourneyTemplateDayMutation!
  day3: JourneyTemplateDayMutation!
  day4: JourneyTemplateDayMutation!
  day5: JourneyTemplateDayMutation!
  day6: JourneyTemplateDayMutation!
  groupId: ID!
  id: ID
  name: String!
}

type JustificationAnswer {
  campoTipo: String
  idJustificativa: Int
  idReclamacaoPadrao: Int
  itemReclamacaoId: Int
  itemTipo: String
  respostas: [String]
  solucao: String
}

input JustificationInput {
  idReclamacaoPadrao: ID!
  profileId: ID!
  values: [String]!
}

type Justificativa {
  campo: CampoReclamacao
  descricao: String
  idReclamacaoPadrao: Int
}

input KairosAdjustmentInput {
  date: Date!
  delete: Boolean!
  id: ID
  time: Time!
  type: WorkdayEntryType!
}

type KairosTimeClock {
  clockFactoryNumber: String
  groupId: ID
  hasAutomaticTimeclockImport: Boolean
  lastTimeclockImport: NaiveDatetimeUsec
}

input KairosWorkdayAdjustInput {
  adjustments: [KairosAdjustmentInput!]!
  dayId: ID!
}

type KenobyIntegration implements CompanyIntegration {
  active: Boolean
  associableFields: [IntegrationField]
  company: Company
  counts: IntegrationCount
  description: String
  fields: [IntegrationField]
  name: String
  token: Token
  type: IntegrationType
}

type Kit {
  customDocuments: [CustomDocument]
  id: ID
  name: String
}

type LifeInsurance {
  id: ID
  name: String
  plan: String
  provider: String
}

type LookerEmbedUrl {
  url: String
}

"""

"""
enum MaritalStatus {
  """
  Concubinato
  """
  CONCUBINAGE
  """
  Divorciado(a)
  """
  DIVORCED
  """
  Separado(a) judicialmente
  """
  LEGALLY_SEPARATED
  """
  Casado(a)
  """
  MARRIED
  """
  Não especificado
  """
  NONE
  """
  Solteiro(a)
  """
  SINGLE
  """
  União estável
  """
  STABLE_UNION
  """
  Viúvo(a)
  """
  WIDOWED
}

type MaritalStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: MaritalStatus
}

"""

"""
enum MaritalStatusType {
  """
  Concubinato
  """
  CONCUBINAGE
  """
  Divorciado(a)
  """
  DIVORCED
  """
  Separado(a) judicialmente
  """
  LEGALLY_SEPARATED
  """
  Casado(a)
  """
  MARRIED
  """
  Não especificado
  """
  NONE
  """
  Solteiro(a)
  """
  SINGLE
  """
  União estável
  """
  STABLE_UNION
  """
  Viúvo(a)
  """
  WIDOWED
}

"""
Representa o documento CNH de uma pessoa ou a ausência dele.
"""
union MaybeCnh = DocumentCnh | AbsentDocument

"""
Carteira de trabalho
"""
union MaybeCtps = DocumentCtps | AbsentDocument

union MaybeDependent = HasDependents | AbsentDependent

"""
Representa o Certificado de Alistamento Militar (CAM) de uma pessoa ou a ausência dele.
"""
union MaybeDocumentCam = DocumentCam | AbsentDocument

"""
Comprovante de estado civil.
"""
union MaybeMaritalStatusCertificate =
    DocumentMaritalStatusCertificate
  | AbsentDocument

union MaybePis = DocumentPis | AbsentDocument

"""
Representa o cartão SUS de uma pessoa ou a ausência dele.
"""
union MaybeSus = DocumentSus | AbsentDocument

"""
Representa o Título de Eleitor de uma pessoa ou a ausência dele.
"""
union MaybeVoter = Voter | AbsentDocument

type MealAllowance {
  amount: Money
  """
  This field uses the Money type but may represent a percentage instead
    depending on the value of the discountType field.
  """
  discountAmount: Money
  discountType: MealAllowanceDiscount
  id: ID
  name: String
  periodicity: MealAllowancePeriodicity
  provider: MealAllowanceProvider
  type: MealAllowanceType
}

"""

"""
enum MealAllowanceDiscount {
  """
  (R$)
  """
  ABSOLUTE
  """
  %
  """
  PERCENT
}

type MealAllowanceDiscountDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: MealAllowanceDiscount
}

"""

"""
enum MealAllowancePeriodicity {
  """
  Diário
  """
  DAILY
  """
  Mensal
  """
  MONTHLY
}

type MealAllowancePeriodicityDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: MealAllowancePeriodicity
}

type MealAllowanceProvider {
  name: String
}

"""

"""
enum MealAllowanceType {
  """
  Refeitório
  """
  CAFETERIA
  """
  Cesta básica
  """
  CESTA_BASICA
  """
  Prato feito
  """
  PF
  """
  Vale Alimentação em Dinheiro
  """
  REINBURSED_VA
  """
  Vale Refeição em Dinheiro
  """
  REINBURSED_VR
  """
  Vale Alimentação
  """
  VA
  """
  Vale Refeição
  """
  VR
}

type MealAllowanceTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: MealAllowanceType
}

type Message {
  canDismiss: Boolean
  checkedAt: Datetime
  content: String
  errors: [ErrorMessage]
  id: ID
  stepByStep: StepMessage
  subtitle: String
  title: String
  type: MessageType
}

"""

"""
enum MessageType {
  """
  Error
  """
  ERROR
  """
  Info
  """
  INFO
  """
  Success
  """
  SUCCESS
  """
  Warning
  """
  WARNING
}

type MessageUpsertPayload {
  profile: Profile
}

type MissingProfiles {
  results(limit: Int, paginationToken: ID): [DanglingPis]
  totalHits: Int
}

scalar Money

scalar Month

type MutatePositionReply {
  errors: [Error]
  positions: [Position]
}

"""
Date and time (without a time zone) in the format described by ISO 8601.
"""
scalar NaiveDatetimeUsec

"""

"""
enum Nationality {
  """
  Afegã
  """
  AFEGA
  """
  Albanêsa
  """
  ALBANESA
  """
  Alemã
  """
  ALEMA
  """
  Americana
  """
  AMERICANA
  """
  Andorrana
  """
  ANDORRANO
  """
  Angolana
  """
  ANGOLANA
  """
  Anguilana
  """
  ANGUILANO
  """
  Antiguana
  """
  ANTIGUANA
  """
  Antilhana
  """
  ANTILHANO
  """
  Argélia
  """
  ARGELIA
  """
  Argentina
  """
  ARGENTINA
  """
  Armena
  """
  ARMENA
  """
  Arubana
  """
  ARUBANO
  """
  Australiana
  """
  AUSTRALIANA
  """
  Austríaca
  """
  AUSTRIACA
  """
  Azeri
  """
  AZERI
  """
  Bahamense
  """
  BAHAMENSE
  """
  Bangladesh
  """
  BANGLADESH
  """
  Barbadiana
  """
  BARBADIANA
  """
  Bechuana
  """
  BECHUANA
  """
  Belga
  """
  BELGA
  """
  Belizenha
  """
  BELIZENHA
  """
  Benineseo
  """
  BENINESEO
  """
  Bermudense
  """
  BERMUDENSE
  """
  Bielorrussa
  """
  BIELORRUSSO
  """
  Boliviana
  """
  BOLIVIANA
  """
  Bósnia
  """
  BOSNIO
  """
  Brasileira
  """
  BRAZIL
  """
  Britânica
  """
  BRITANICA
  """
  Bruneína
  """
  BRUNEINO
  """
  Búlgara
  """
  BULGARO
  """
  Burquina
  """
  BURQUINO
  """
  Burundiana
  """
  BURUNDIANO
  """
  Butanês
  """
  BUTANES
  """
  Cabo-Verdiana
  """
  CABO_VERDIANO
  """
  Caimanêsa
  """
  CAIMANES
  """
  Camaronense
  """
  CAMARONENSE
  """
  Cambojana
  """
  CAMBOJANO
  """
  Canadense
  """
  CANADENSE
  """
  Cazaque
  """
  CAZAQUE
  """
  Centro-Africano
  """
  CENTRO_AFRICANO
  """
  Chadiana
  """
  CHADIANO
  """
  Chilena
  """
  CHILENA
  """
  Chinesa
  """
  CHINESA
  """
  Cingalês
  """
  CINGALES
  """
  Cipriota
  """
  CIPRIOTA
  """
  Colombiana
  """
  COLOMBIANA
  """
  Comorense
  """
  COMORENSE
  """
  Congolêsa
  """
  CONGOLES
  """
  Cookense
  """
  COOKENSE
  """
  Costarriquenha
  """
  COSTARRIQUENHA
  """
  Croata
  """
  CROATA
  """
  Cubana
  """
  CUBANA
  """
  Dinamarquesa
  """
  DINAMARQUESA
  """
  Dominicana
  """
  DOMINICANA
  """
  Egípcia
  """
  EGIPCIA
  """
  Emiradense
  """
  EMIRADENSE
  """
  Equatoriana
  """
  EQUATORIANA
  """
  Escocesa
  """
  ESCOCESA
  """
  Eslovaca
  """
  ESLOVACA
  """
  Eslovena
  """
  ESLOVENA
  """
  Espanhola
  """
  ESPANHOLA
  """
  Estónio
  """
  ESTONIO
  """
  Etíope
  """
  ETIOPE
  """
  Fijiana
  """
  FIJIANO
  """
  Filipina
  """
  FILIPINO
  """
  Finlandêsa
  """
  FINLANDES
  """
  Francesa
  """
  FRANCESA
  """
  Gabonêsa
  """
  GABONES
  """
  Galesa
  """
  GALESA
  """
  Gambiana
  """
  GAMBIANO
  """
  Ganesa
  """
  GANESA
  """
  Georgiana
  """
  GEORGIANO
  """
  Granadina
  """
  GRANADINA
  """
  Grega
  """
  GREGA
  """
  Guadalupense
  """
  GUADALUPENSE
  """
  Guatemalteca
  """
  GUATEMALTECA
  """
  Guianesa
  """
  GUIANESA
  """
  Guineana
  """
  GUINEANO
  """
  Guineensa
  """
  GUINEENSE
  """
  Guinéu-Equatoriana
  """
  GUINEU_EQUATORIANO
  """
  Haitiana
  """
  HAITIANA
  """
  Holandesa
  """
  HOLANDESA
  """
  Honconguêsa
  """
  HONCONGUES
  """
  Hondurenha
  """
  HONDURENHA
  """
  Húngara
  """
  HUNGARA
  """
  Iemenita
  """
  IEMENITA
  """
  Indiana
  """
  INDIANA
  """
  Indonésia
  """
  INDONESIA
  """
  Inglesa
  """
  INGLESA
  """
  Iraniana
  """
  IRANIANA
  """
  Iraquiana
  """
  IRAQUIANA
  """
  Irlandesa
  """
  IRLANDESA
  """
  Islandêsa
  """
  ISLANDES
  """
  Israelita
  """
  ISRAELITA
  """
  Italiana
  """
  ITALIANA
  """
  Jamaicana
  """
  JAMAICANA
  """
  Japonesa
  """
  JAPONESA
  """
  Jibutiana
  """
  JIBUTIANO
  """
  Laociana
  """
  LAOCIANO
  """
  Lesotiana
  """
  LESOTIANO
  """
  Líbanesa
  """
  LIBANESA
  """
  Liberiana
  """
  LIBERIANO
  """
  Listenstainiana
  """
  LISTENSTAINIANO
  """
  Lituana
  """
  LITUANO
  """
  Luxemburguêsa
  """
  LUXEMBURGUES
  """
  Macaense
  """
  MACAENSE
  """
  Malaia
  """
  MALAIA
  """
  Maldivo
  """
  MALDIVO
  """
  Maliano
  """
  MALIANO
  """
  Maltês
  """
  MALTES
  """
  Marfinense
  """
  MARFINENSE
  """
  Marroquina
  """
  MARROQUINA
  """
  Martinicano
  """
  MARTINICANO
  """
  Mexicana
  """
  MEXICANA
  """
  Moçambicana
  """
  MOCAMBICANA
  """
  Mongol
  """
  MONGOL
  """
  Monserratense
  """
  MONSERRATENSE
  """
  Montenegrino
  """
  MONTENEGRINO
  """
  Namibiano
  """
  NAMIBIANO
  """
  Nauruano
  """
  NAURUANO
  """
  Neocaledónio
  """
  NEOCALEDONIO
  """
  Neozelandesa
  """
  NEOZELANDESA
  """
  Nepalesa
  """
  NEPALESA
  """
  Nicaraguense
  """
  NICARAGUENSE
  """
  Nigeriana
  """
  NIGERIANA
  """
  Nigeriano
  """
  NIGERIANO
  """
  Norte-coreana
  """
  NORTE_COREANA
  """
  Norueguesa
  """
  NORUEGUESA
  """
  Omanense
  """
  OMANENSE
  """
  Outra
  """
  OTHER
  """
  Palauano
  """
  PALAUANO
  """
  Palestina
  """
  PALESTINA
  """
  Panamenha
  """
  PANAMENHA
  """
  Papua
  """
  PAPUA
  """
  Paquistanesa
  """
  PAQUISTANESA
  """
  Paraguaia
  """
  PARAGUAIA
  """
  Peruana
  """
  PERUANA
  """
  Polinésio
  """
  POLINESIO
  """
  Polonesa
  """
  POLONESA
  """
  Portorriquenha
  """
  PORTORRIQUENHA
  """
  Portuguesa
  """
  PORTUGUESA
  """
  Qatarense
  """
  QATARENSE
  """
  Queniana
  """
  QUENIANA
  """
  Quirguiz
  """
  QUIRGUIZ
  """
  Quiribatiano
  """
  QUIRIBATIANO
  """
  Romena
  """
  ROMENA
  """
  Ruandesa
  """
  RUANDESA
  """
  Russa
  """
  RUSSA
  """
  Salvadorenha
  """
  SALVADORENHA
  """
  Santa-lucense
  """
  SANTA_LUCENSE
  """
  São-cristovense
  """
  SAO_CRISTOVENSE
  """
  São-Marinhense
  """
  SAO_MARINHENSE
  """
  São-Tomense
  """
  SAO_TOMENSE
  """
  São-vicentina
  """
  SAO_VICENTINA
  """
  Saudita
  """
  SAUDITA
  """
  Senegalês
  """
  SENEGALES
  """
  Serra-Leonês
  """
  SERRA_LEONES
  """
  Sérvia
  """
  SERVIA
  """
  Síria
  """
  SIRIA
  """
  Somaliana
  """
  SOMALIANA
  """
  Suazilandês
  """
  SUAZILANDES
  """
  Sudanês
  """
  SUDANES
  """
  Sueca
  """
  SUECA
  """
  Suíça
  """
  SUICA
  """
  Sul-africana
  """
  SUL_AFRICANA
  """
  Sul-coreana
  """
  SUL_COREANA
  """
  Surinamês
  """
  SURINAMES
  """
  Tailandesa
  """
  TAILANDESA
  """
  Taiwanês
  """
  TAIWANES
  """
  Tanzaniana
  """
  TANZANIANO
  """
  Timorense
  """
  TIMORENSE
  """
  Togolês
  """
  TOGOLES
  """
  Tonganês
  """
  TONGANES
  """
  Trindadense
  """
  TRINDADENSE
  """
  Turca
  """
  TURCA
  """
  Tuvaluano
  """
  TUVALUANO
  """
  Ucraniana
  """
  UCRANIANA
  """
  Ugandense
  """
  UGANDENSE
  """
  Uruguaia
  """
  URUGUAIA
  """
  Usbeque
  """
  USBEQUE
  """
  Vanuatuense
  """
  VANUATUENSE
  """
  Vaticano
  """
  VATICANO
  """
  Venezuelana
  """
  VENEZUELANA
  """
  Vietnamita
  """
  VIETNAMITA
  """
  Zambiano
  """
  ZAMBIANO
  """
  Zimbabuense
  """
  ZIMBABUENSE
}

type NationalityDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: Nationality
}

input NetSalaryChange {
  """
  Montante
  """
  amount: Money
  """
  Data da mudança
  """
  date: Date
  """
  Id do colaborador
  """
  profileId: Int
  """
  Motivo para mudança
  """
  reason: String
}

"""

"""
enum NotificationContactLabel {
  """
  Profissional
  """
  BUSINESS
  """
  Pessoal
  """
  PERSONAL
}

"""

"""
enum NotificationTopicType {
  """
  Notificações para o contato de login
  """
  ACCOUNT
  """
  Notificações sem um tópico específico associado
  """
  OTHER
  """
  Envio de Holerite
  """
  SEND_HOLLERITH
}

type NotificationTopicTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: NotificationTopicType
}

input NuclearWorkloadDescriptionInput {
  intervalDurationInMinutes: Int!
  loadInMinutes: Int!
  numIntervals: Int!
  outerCheckin: Time!
  outerCheckout: Time!
  toleranceInMinutes: Int!
  weekdays: [Weekday]!
}

input NuclearWorkloadInput {
  companyId: ID!
  name: String!
  schedule: NuclearWorkloadScheduleInput!
}

input NuclearWorkloadScheduleInput {
  nuclearDescriptions: [NuclearWorkloadDescriptionInput]!
}

interface ObjectWithExternalAssociations {
  externalAssociations: ExternalAssociations
  id: ID
  name: String
}

type Offboard {
  otherAttachments: [Attachments]
  paymentAttachments: [Attachments]
}

type Office implements ObjectWithExternalAssociations {
  address: Address
  company: Company
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  partner: Partner
}

input OfficeInput {
  address: AddressInput!
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String!
  partner: PartnerInput
}

type OnboardAttributes {
  childrenCount: Int
  customFieldsCompletions: [Completion]
  documentCompletions: [Completion]
  hasAnotherDependents: Boolean
  hasBankAccount: Boolean
  hasChildren: Boolean
  hasCnh: Boolean
  hasCtps: Boolean
  hasDependents: Boolean
  hasWorkedBefore: Boolean
  id: ID
  isSpouseDependent: Boolean
  profileCompletions: [Completion]
  progress: String
  reminderSentAt: NaiveDatetimeUsec
  step: String
}

input OnboardAttributesInput {
  childrenCount: Int
  hasAnotherDependents: Boolean
  hasBankAccount: Boolean
  hasChildren: Boolean
  hasCnh: Boolean
  hasCtps: Boolean
  hasDependents: Boolean
  hasWorkedBefore: Boolean
  isSpouseDependent: Boolean
  reminderSentAt: NaiveDatetimeUsec
  step: String
}

input OnboardInput {
  attributes: OnboardAttributesInput
  profileId: ID
}

type Onboarding {
  progress: Progress
}

type OpcaoSat {
  descricao: String
  idOpcao: Int
  valor: String
}

input OrganizationalStructureInput {
  businessUnitId: Int
  cnpjId: Int
  companyId: Int!
  costCenterId: Int
  deptoId: Int
  payerCnpjId: Int
  positionLevelId: Int
  profileIds: [ID]!
}

type OrganizationalStructurePayload {
  batchJobId: Int
}

type OriginalEntries {
  datetime: NaiveDatetimeUsec
  id: ID
  removed: Boolean
}

type Overtime {
  credit: Int
  debt: Int
}

type Partner {
  externalId: String
}

input PartnerInput {
  externalId: String!
  partnerHash: String!
}

type Payment {
  method: PaymentMethod
  nextPaymentDue: Date
}

type PaymentBoleto implements IPaymentHistoryEntry {
  due: Date
  number: String
  status: PaymentStatus
  url: String
}

type PaymentCreditCard implements IPaymentHistoryEntry {
  due: Date
  status: PaymentStatus
}

union PaymentHistoryEntry = PaymentBoleto | PaymentCreditCard

"""

"""
enum PaymentMethod {
  """
  Boleto
  """
  BOLETO
  """
  Cartão de crédito
  """
  CREDITCARD
}

type PaymentMethodDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: PaymentMethod
}

"""

"""
enum PaymentStatus {
  """
  Atrasado
  """
  OVERDUE
  """
  Pendente
  """
  PENDING
  """
  Sucesso
  """
  SUCCESS
}

type PaymentStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: PaymentStatus
}

"""

"""
enum PaystubCapability {
  """
  Unidade de negócio
  """
  BUSINESS_UNIT
  """
  Empresa
  """
  COMPANY
  """
  Escritório
  """
  OFFICE
}

type PaystubCapabilityDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: PaystubCapability
}

type PaystubCapabilityInfo {
  capability: PaystubCapability
  enabled: Boolean
}

type PaystubFilePage {
  id: ID
}

type PaystubStatisticDataset {
  departmentId: String
  values: [PaystubStatisticValue]
  yearMonth: YearMonth
}

type PaystubStatisticValue {
  entry: Identifier
  value: Float
}

type PaystubStatistics {
  availableDepartments: [Identifier]
  dataset: [PaystubStatisticDataset]
  yearMonthBounds: [YearMonth]
}

input PaystubStatisticsInput {
  departmentId: String
  period: PeriodInput!
  view: PaystubStatisticsView!
}

enum PaystubStatisticsView {
  ABSOLUTE
  PERCAPITA
  PERCENTAGE
}

type PdfAttachment {
  aspect: Float
  etag: String
  id: String
  mime: String
  mtime: Datetime
  name: String
  pages: Int
  type: String
  url: String
}

type Period {
  endDate: Date
  groupId: String
  id: ID
  profilesCount: Int
  profilesWithAbsencesCount: Int
  scales: [Scale]
  startDate: Date
  status: String
}

input PeriodInput {
  endOn: YearMonthInput
  startOn: YearMonthInput
}

type PersonalAddress {
  address1: String
  address2: String
  attachments: PersonalAddressAttachments
  city: City
  district: String
  number: String
  type: StreetType
  zipcode: String
}

type PersonalAddressAttachments {
  """
  Comprovante de Residência
  """
  proofOfAddress: Attachment
}

input PersonalAddressAttachmentsInput {
  proofOfAddress: DocumentAttachment
}

input PersonalAddressUpsertInput {
  address1: String
  address2: String
  attachments: PersonalAddressAttachmentsInput
  cityId: ID
  district: String
  number: String
  profileId: ID!
  type: StreetType
  zipcode: String
}

type PersonalAddressUpsertPayload {
  personalAddress: PersonalAddress
  profile: Profile
}

type PersonalContact {
  email: String
  emergency: [EmergencyContact]
  mobile: String
  phone: String
  profile: Profile
  updatedContacts: [ContactType]
}

input PersonalContactInput {
  email: String
  emergency: [EmergencyContactInput]
  mobile: String
  phone: String
  profileId: ID!
}

type PersonnelRequest {
  externalId: String
}

type PontomaisCompanyExternalAssociations {
  token: String
}

input PontomaisCompanyExternalAssociationsInput {
  token: String
}

type Position {
  id: ID
  levels: [PositionLevel]
  name: String
  partner: Partner
}

input PositionInput {
  delete: Boolean
  id: ID
  levels: [PositionLevelInput]
  name: String
  partner: PartnerInput
}

type PositionLevel implements ObjectWithExternalAssociations {
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  position: Position
}

input PositionLevelInput {
  delete: Boolean
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String
}

"""

"""
enum ProbationPeriods {
  """
  Personalizado
  """
  CUSTOM
  """
  1x60 dias
  """
  _1X60
  """
  1x90 dias
  """
  _1X90
  """
  2x30 dias
  """
  _2X30
  """
  2x45 dias
  """
  _2X45
  """
  30 + 60 dias
  """
  _30_60
}

type ProbationPeriodsDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: ProbationPeriods
}

type ProcessFileLine {
  error: String
  status: String
}

input ProcessFileMap {
  addressNumber: String
  admissionDate: String
  anticipatesSalary: Boolean
  birthday: String
  businessUnit: String
  cep: String
  checkingAccountNumber: String
  checkingAgency: String
  checkingBankCode: String
  checkingDigit: String
  cnpj: String
  cpf: String
  email: String
  grossSalary: Int
  maritalStatus: String
  name: String
  nationality: String
  operation: String
  phone: String
  pis: String
  punchcard: Boolean
  rg: String
  salaryAccountNumber: String
  salaryAgency: String
  salaryBankCode: String
  salaryDigit: String
}

type Profile implements AggregationBucket {
  absence(id: ID!): Absence
  absences(
    """
    Start and end of the workday period. If this and `period_end_on` are set,
    returns only absences that start before `period_end_on` or
    that end after `period_start_on`. Else, returns all absences.
    """
    workPeriodInterval: WorkPeriodInput
  ): [Absence]
  accessSituation: ProfileAccessSituation
  account: Account
  admissionDate: Date
  anticipatesSalary: Boolean
  """
  Anexos do colaborador
  """
  attachments: [Attachment]
  avatar(height: Int, width: Int): Thumbnail
  """
  Representa os dados bancários de um colaborador.
  """
  bankAccounts: [BankAccount]
  birthday: Date
  businessContact: BusinessContact
  businessUnit: BusinessUnit
  cbo: Cbo
  childCare: ProfileChildCare
  cnpj: CompanyCnpj
    @deprecated(
      reason: "O colaborador agora vai poder definir mais de um CNPJ como por exemplo (cnpj do pagador) com isso foi criado um novo campo chamado [cnpjs]. O campo [cnpj] a partir de agora está depreciado."
    )
  """
  CNPJs do colaborador
  """
  cnpjs: [ProfileCompanyCnpj]
  companyId: Int
  companyName: String
  contactPreferences: [ContactPreference]
  contractEndDate: Date
  costCenter: CostCenter
  customDocumentSubmissions: [CustomDocumentSubmission]
    @deprecated(reason: "Use `document_templating_submissions instead.`")
  customFields: [CustomFieldsInstance]
  dentalInsurance: ProfileDentalInsurance
  department: Department
  dependents: MaybeDependent
  disabilities: [Disabilities]
  documentLimitDate: Date
  documentTemplatingSubmissions: [DocumentTemplatingSubmission]
  """
  Representa os documentos de um colaborador.
  """
  documents: ProfileDocuments
  """
  Retorna a formação escolar de um colaborador
  """
  education: [Education]
  emergencyContact: [EmergencyContact]
  """
  Número de matrícula
  """
  employeeNumber: String
  employmentContract: EmploymentContract
  fallbackContact: String
  fathersName: String
  gender: Gender
  guid: ID
  hasConsignado: Boolean
  healthInsurance: ProfileHealthInsurance
  id: ID
  invite: Invite
  inviteContact: String
  lastDay: Date
  lifeInsurance: ProfileLifeInsurance
  managers: [PublicProfile]
  maritalStatus: MaritalStatus
  mealAllowance: ProfileMealAllowance
  messages: [Message]
  mothersName: String
  name: String
  nationality: Nationality
  naturalityCity: City
  netSalary: Money
  notificationContacts: [Contact]
  notificationDate: Date
  offboard: Offboard
  office: Office
  onboard: OnboardAttributes
  onboarding: Onboarding
  overtimeAllowed: Boolean
  partner: Partner
  personalAddress: PersonalAddress
  personalContact: PersonalContact
  phone: ProfilePhone
  position: ProfilePosition
  positionLevel: PositionLevel @deprecated(reason: "Use `position instead.`")
  """
  Nome social
  """
  preferredName: String
  probationDate1: Date
  probationDate2: Date
  probationPeriods: ProbationPeriods
  profileIntegrationStatus: [IntegrationStatus]
  punchcardRequired: Boolean
  qualificationDate: Date
  qualificationStatus: QualificationStatus
  salary: Money
  salaryPeriod: SalaryPeriod
  skinColor: SkinColor
  status: ProfileStatus
  subordinates: [PublicProfile]
  transport: ProfileTransport
  transportRouteIntegration: ProfileTransportIntegration
  trustedPosition: Boolean
  union: Union
  username: String
  viewerCanApproveAbsence: Boolean
  viewerCanBlockProfile: Boolean
  viewerCanDeleteProfile: Boolean
  viewerCanEditContract: Boolean
  viewerCanEditProfileStatus: Boolean
  viewerCanEditSalary: Boolean
  viewerCanNotifyAccountant: Boolean
  viewerCanNotifyDp: Boolean
  viewerCanReinviteProfile: Boolean
  viewerCanViewAbsences: Boolean
  viewerCanViewOffboardProfile: Boolean
  viewerCanViewPaystubs: Boolean
  viewerCanViewSalary: Boolean
  viewerCanViewVacations: Boolean
  viewerCanViewWorkPeriods: Boolean
  viewerCanViewXerpay: Boolean
  visualizationRole: VisualizationRole
  workPeriod(id: ID): ProfileWorkPeriod
  workPeriods: [ProfileWorkPeriodListView]
  workday(id: ID!): Workday @deprecated(reason: "To be removed")
  workdays(endOn: Date!, startOn: Date!): [Workday]
    @deprecated(reason: "To be removed")
  workload: Workload
}

"""

"""
enum ProfileAccessSituation {
  """
  Acesso bloqueado
  """
  BLOCKED
  """
  Sem acesso
  """
  NO_ACCOUNT
  """
  Com acesso
  """
  OK
}

type ProfileAccessSituationDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: ProfileAccessSituation
}

"""

"""
enum ProfileBenefitStatus {
  """
  Escolhido
  """
  CHOSEN
  """
  Recusado
  """
  OPTED_OUT
  """
  Não escolhido
  """
  PENDING
  """
  Não oferecido
  """
  UNAVAILABLE
}

type ProfileBenefitStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: ProfileBenefitStatus
}

input ProfileCensusInput {
  profileGuid: ID!
  username: String!
}

type ProfileChildCare {
  chosen: ChildCare
  status: ProfileBenefitStatus
}

input ProfileCnhUpsertAttachmentInput {
  frontImage: DocumentAttachment
}

type ProfileCompanyCnpj {
  cnpj: Cnpj
  guid: ID
  id: ID
  """
  Razao social
  """
  legalName: String
  """
  Nome da empresa
  """
  name: String
  partner: Partner
  payer: Boolean
}

input ProfileContractInput {
  admissionDate: Date
  anticipatesSalary: Boolean
  businessUnitId: ID
  cboId: ID
  cnpjId: ID
  companyPositionId: ID
  contractEndDate: Date
  costCenterId: ID
  departmentId: ID
  employeeNumber: String
  employmentContract: EmploymentContract
  hasConsignado: Boolean
  id: ID!
  managersIds: [ID!]
  officeId: ID
  overtimeAllowed: Boolean
  payerCnpjId: ID
  positionLevelId: ID
  probationDate1: Date
  probationDate2: Date
  probationPeriods: ProbationPeriods
  punchcardRequired: Boolean
  salary: Money
  salaryPeriod: SalaryPeriod
  trustedPosition: Boolean
  unionId: ID
  workloadId: ID
}

input ProfileCpfUpsertAttachmentInput {
  frontImage: DocumentAttachment
}

input ProfileCustomFieldsAssocInput {
  customFieldsIds: [ID!]!
  profileGuid: ID!
}

type ProfileDentalInsurance {
  chosen: DentalInsurance
  status: ProfileBenefitStatus
}

"""
Representa os documentos de um colaborador.
"""
type ProfileDocuments {
  """
  O Certificado de Alistamento Militar do colaborador.
  """
  cam: MaybeDocumentCam
  """
  A CNH do colaborador.
  """
  cnh: MaybeCnh
  """
  O CPF do colaborador.
  """
  cpf: DocumentCpf
  """
  A Carteira de Trabalho do colaborador.
  """
  ctps: MaybeCtps
  """
  Comprovante de Estado Civil
  """
  maritalStatusCertificate: MaybeMaritalStatusCertificate
  """
  O PIS do colaborador
  """
  pis: MaybePis
  """
  O RG do colaborador.
  """
  rg: DocumentRg
  """
  O Registro Nacional de Estrangeiros do colaborador.
  """
  rne: DocumentRne
  """
  O SUS do colaborador.
  """
  sus: MaybeSus
  """
  O Título de Eleitor do colaborador.
  """
  voter: MaybeVoter
}

type ProfileHealthInsurance {
  chosen: HealthInsurance
  status: ProfileBenefitStatus
}

input ProfileIdentificationInput {
  birthday: Date
  disabilities: [Disabilities]
  fathersName: String
  gender: Gender
  guid: ID!
  maritalStatus: MaritalStatus
  mothersName: String
  name: String
  nationality: Nationality
  naturalityCityId: ID
  preferredName: String
  skinColor: SkinColor
}

type ProfileIdentificationUpdatePayload {
  profile: Profile
}

type ProfileIntegrationStatus {
  id: ID
}

input ProfileInviteInput {
  admissionDate: Date
  documentLimitDate: Date
  employmentContract: EmploymentContract!
  name: String!
  username: String!
}

type ProfileLifeInsurance {
  chosen: LifeInsurance
  status: ProfileBenefitStatus
}

input ProfileMaritalStatusUpsertAttachmentInput {
  frontImage: DocumentAttachment
}

type ProfileMealAllowance {
  chosen: MealAllowance
  status: ProfileBenefitStatus
}

type ProfileMissingLastDay {
  paginationToken: ID
  profile: Profile
}

type ProfilePhone {
  branch: String
  business: String
  personal: String
}

type ProfilePosition {
  id: ID
  name: String
  partner: Partner
  positionLevel: PositionLevel
}

input ProfileQualificationDataInput {
  birthday: Date!
  cpfNumber: String!
  guid: ID!
  name: String!
  pisNumber: String
}

type ProfileQualificationDataPayload {
  profile: Profile
}

type ProfileSearchResult {
  allGuids: [ID]
  profiles: [Profile]
  totalHits: Int
}

"""

"""
enum ProfileStatus {
  """
  Ativo
  """
  ACTIVE
  """
  Desligado
  """
  FIRED
  """
  Em admissão
  """
  IN_ADMISSION
  """
  Em experiência
  """
  IN_EXPERIENCE
  """
  Em desligamento
  """
  OFFBOARDING
}

type ProfileStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: ProfileStatus
}

input ProfileSusUpsertAttachmentInput {
  backImage: DocumentAttachment
}

type ProfileTransport {
  cardDescription: String
  description: String
  status: ProfileBenefitStatus
  totalCost: Money
  type: TransportType
}

type ProfileTransportIntegration {
  externalProfileId: Int
  id: ID
  integrationType: String
  justificationAnswer: JustificationAnswer
  """
  OS campos desse objeto estao em portugues.
  Por se tratar do resultado espelhado da integracao com a SAT Rotas
  """
  routingSection: RouteSection
  status: TransportIntegrationStatus
}

type ProfileWorkPeriod {
  archivedOn: Date
  endOn: Date
  id: ID
  overview: ProfileWorkPeriodOverview
  signature: WorkPeriodProfile
  startOn: Date
  status: WorkPeriodStatus
  workdays: [Workday]
}

type ProfileWorkPeriodListView {
  endOn: Date
  id: ID
  startOn: Date
}

type ProfileWorkPeriodOverview {
  timeBalanceInMinutes: Int
  workdaysMissedCount: Int
  workdaysPendingApprovalCount: Int
  workdaysPendingCount: Int @deprecated(reason: "no longer available")
  workdaysPendingReviewCount: Int
}

type ProfilesMissingLastDay {
  results(limit: Int, paginationToken: ID): [ProfileMissingLastDay]
  totalHits: Int
}

type Progress {
  completed: Int
  total: Int
}

"""

"""
enum ProviderConnectionStatus {
  """
  Error when attempting to access
  """
  ACCESS_ERROR
  """
  Provider connected and ready to use
  """
  CONNECTED
  """
  Awaiting user consent
  """
  PENDING_USER_CONSENT
  """
  Awaiting for the setup to finish
  """
  WAITING_SETUP
}

type ProviderConnectionStatusDescription {
  value: CompanyProviderName
}

input ProviderDeleteInput {
  """
  Identificador da empresa
  """
  companyId: ID!
  """
  Identificador unico do provider
  """
  guid: String!
}

input ProviderInsertInput {
  """
  Identificador da empresa
  """
  companyId: ID!
  """
  Flag provider habilitado para a empresa?
  """
  enabled: Boolean!
  """
  Nome do provider
  """
  name: CompanyProviderName!
  """
  Tipo do provider.
  """
  type: CompanyProviderType!
}

input ProviderUpdateInput {
  """
  Identificar unico da empresa
  """
  companyId: ID!
  """
  Flag provider habilitado para a empresa?
  """
  enabled: Boolean!
  """
  Identificador unico do provider
  """
  guid: String!
  """
  Lista de parametros específicos desse provider
  """
  settings: [CompanyProviderSetttingsUpdateInput!]
}

type PublicPosition {
  id: ID
  name: String
}

type PublicPositionLevel {
  id: ID
  name: String
  position: PublicPosition
}

type PublicProfile {
  avatar(height: Int, width: Int): Thumbnail
  id: ID
  name: String
  positionLevel: PublicPositionLevel
}

"""

"""
enum QualificationStatus {
  """
  Não preenchido
  """
  BLANK
  """
  Consistente
  """
  CONSISTENT
  """
  Pendente
  """
  PENDING
  """
  Processando
  """
  PROCESSING
  """
  Rejeitado
  """
  REJECTED
  """
  Requalificação pendente
  """
  REQUALIFICATION_PENDING
}

"""
Representa uma batida de ponto original advinda de um arquivo AFD.
"""
type RawAfdEntry {
  """
  Data e hora da batida.
  """
  datetime: NaiveDatetimeUsec
  """
  PIS do colaborador.
  """
  pis: String
}

type Role {
  access: AccessLevel
  company: Company
}

type RootMutationType {
  absence(input: AbsenceInput!): Absence
  absenceDelete(input: AbsenceDeleteInput!): Absence
  """
  Salva a aceitação do rota
  """
  acceptRoute(profileId: ID!): ProfileTransportIntegration
  alterPositions(
    companyId: ID!
    positions: [PositionInput]
  ): MutatePositionReply
  apiTokenDelete(id: ID!): TokenDescription
  apiTokenGenerate(input: ApiTokenInput!): ApiToken
  avatarUpsert(input: AvatarUpsertInput!): AvatarPayload
  bankAccountDelete(id: ID!): BankAccountUpsertPayload
  bankAccountUpsert(input: BankAccountUpsertInput!): BankAccountUpsertPayload
  bankUpsert(input: BankInput!): Bank
  bulkImport(
    companyGuid: String!
    line: ProcessFileMap!
    type: String!
  ): ProcessFileLine
  businessContact(input: BusinessContactInput!): BusinessContact
  """
  Insere ou atualiza unidade de negócio.
  """
  businessUnit(input: BusinessUnitInput!): BusinessUnit
  """
  Apaga unidade de negócio
  """
  businessUnitDelete(id: ID!): BusinessUnit
  """
  Valida se integracao para roteirizacao de vale transporte esta habilitada e engatilha execucao
  """
  calculateRoute(profileId: ID!): ProfileTransportIntegration
  changeStatus(profileId: Int!, status: ProfileStatus!): Profile
  changeUsername(profileId: Int!, username: String!): Profile
  cnpjDelete(input: CnpjDelete!): [CompanyCnpj]
  cnpjUpsert(input: CnpjInput!): CompanyCnpj
  commentDelete(input: CommentDeleteInput!): Comment
  commentInsert(input: CommentInsertInput!): Comment
  commitOnboard(profileId: ID!): OnboardAttributes
  companyProviderDelete(input: ProviderDeleteInput!): CompanyProvider
  companyProviderInsert(input: ProviderInsertInput!): CompanyProvider
  companyProviderUpdate(input: ProviderUpdateInput!): CompanyProvider
  completeProfileInformation(
    input: CompleteProfileInformationInput!
  ): WorkPeriodConfig
  """
  Confirmação de autenticação
  """
  confirmDocusignAuthentication(companyId: ID!, state: String!): CompanyProvider
  contactPreference(
    contactId: ID!
    id: ID
    topic: NotificationTopicType!
  ): [ContactPreference]
  contactPreferenceDelete(id: ID!): [ContactPreference]
  contactVerification(input: ContactVerificationInput!): Contact
  """
  Insere ou atualiza centro de custo.
  """
  costCenter(input: CostCenterInput!): CostCenter
  """
  Apaga centro de custo
  """
  costCenterDelete(id: ID!): CostCenter
  createBatchCompanyAccess(input: CompanyAccessInput!): CompanyAccessPayload
  createBatchHiringData(input: HiringDataInput!): HiringDataPayload
  createBatchJob(input: CreateBatchJobInput!): CreateBatchJobPayload
  createBatchOrganizationalStructure(
    input: OrganizationalStructureInput!
  ): OrganizationalStructurePayload
  createCompanyIntegration(input: CompanyIntegrationInput!): CompanyIntegration
  createCostCenter(input: CreateCostCenterInput!): CostCenter
    @deprecated(reason: "Use cost_center instead")
  createDepartment(input: CreateDepartmentInput!): Department
    @deprecated(reason: "Use department instead")
  createImportFile(
    companyGuid: String!
    s3Url: String!
    type: BatchTypeEtl!
  ): String
  createUnion(input: CreateUnionInput!): Union
    @deprecated(reason: "Use union instead")
  createWebhook(input: WebhookInput!): Webhook
  createWorkload(input: CreateWorkloadInput!): Workload
    @deprecated(reason: "Use workload instead")
  customFieldsConfigurationDelete(
    input: CustomFieldsConfigurationDeleteInput!
  ): CustomFieldsConfiguration
  customFieldsConfigurationUpsert(
    input: CustomFieldsConfigurationUpsertInput!
  ): CustomFieldsConfiguration
  customFieldsProfileUpsert(
    input: CustomFieldsProfileInput!
  ): [CustomFieldsInstance]
  customIntegration(input: CustomIntegrationInput!): CustomCompanyIntegration
  customIntegrationExport(
    input: CustomIntegrationExportInput!
  ): CustomIntegrationExport
  """
  Enviar justificativa de acordo o fluxo esperada para SAT Rotas
  """
  declineRouteJustification(input: JustificationInput!): JustificationAnswer
  deleteCompanyCustomEmail(
    input: CompanyCustomEmailInput!
  ): DeleteCompanyCustomEmailResult
  deleteCompanyIntegration(input: CompanyIntegrationInput!): Company
  deletePaystubFilePage(id: ID!): PaystubFilePage
  deleteWebhook(webhookId: Int!): Webhook
  """
  Insere ou atualiza o departamento.
  """
  department(input: DepartmentInput!): Department
  """
  Apaga o departamento
  """
  departmentDelete(id: ID!): Department
  dependentDelete(input: DependentDeleteInput!): Dependent
  dependentUpsert(input: DependentInput!): Dependent
  dismissMessageUpsert(input: DismissMessageUpsertInput!): MessageUpsertPayload
  documentCamUpsert(input: DocumentCamUpsertInput!): DocumentCamUpsertPayload
  documentCnhOcrRequest(
    input: DocumentCnhOcrRequestInput!
  ): DocumentCnhOcrRequestPayload
  documentCnhOcrUpsert(input: DocumentCnhUpsertInput!): DocumentCnhUpsertPayload
  documentCnhUpsert(input: DocumentCnhUpsertInput!): DocumentCnhUpsertPayload
  documentCpfOcrUpsert(input: DocumentCpfUpsertInput!): DocumentCpfUpsertPayload
  documentCpfUpsert(input: DocumentCpfUpsertInput!): DocumentCpfUpsertPayload
  documentMaritalStatusUpsert(
    input: DocumentMaritalStatusUpsertInput!
  ): DocumentMaritalStatusUpsertPayload
  documentPisUpsert(pis: String, profileId: ID): DocumentPis
  documentRgOcrRequest(
    input: DocumentRgOcrRequestInput!
  ): DocumentRgOcrRequestPayload
  documentRgOcrUpsert(input: DocumentRgUpsertInput!): DocumentRgUpsertPayload
  documentRgUpsert(input: DocumentRgUpsertInput!): DocumentRgUpsertPayload
  documentSusUpsert(input: DocumentSusUpsertInput!): DocumentSusUpsertPayload
  documentVoterUpsert(input: DocumentVoterInput!): DocumentVoterUpsertPayload
  """
  Url de autenticação
  """
  docusignAuthUrl(companyId: ID!): String
  dominioExport(
    companyId: ID!
    profileGuids: [ID!]
    query: String
  ): DefaultIntegrationExport
    @deprecated(reason: "Use integrationExport instead with type DOMINIO.")
  educationUpsert(input: EducationUpsertInput!): EducationUpsertPayload
  """
  Request a temporary url for AWS S3 to upload a file
  """
  generateCustomizationUrl: CustomizationUrl
  """
  Disparo de documentos pelo provider de geração de documentos
  """
  generateDocuments(
    """
    Id company
    """
    companyId: ID!
    """
    Lista de ids do profile
    """
    profilesId: [ID]!
    """
    Lista de ids do template
    """
    templatesId: [ID]!
  ): String
  generateUploadLink(companyGuid: ID!): GenerateUploadLinkPayload
  generateUploadLinkEtl(companyGuid: ID!): GenerateUploadLinkEtlPayload
  generateUploadUrl: UploadUrl
  grantAccess(accessLevel: String!, companyId: ID!, profileId: ID!): Profile
  integrationExport(input: IntegrationExportInput): DefaultIntegrationExport
  inviteProfiles(input: InviteInput!): [Profile]
  journeyTemplateDelete(input: JourneyTemplateDeletionInput!): [JourneyTemplate]
  journeyTemplateUpsert(input: JourneyTemplateMutationInput!): [JourneyTemplate]
  kairosWorkdayAdjust(input: KairosWorkdayAdjustInput!): Day
  libertyCapGenerateUploadLink(companyId: ID): GenerateUploadLinkPayload
  makeAccountant(companyId: ID!): Company
  makePayingCompany(companyId: ID!): Company
  manualInviteProfiles(input: InviteInput!): [Profile]
  netSalaryMutation(
    """
    Salário líquido
    """
    netSalaryChange: NetSalaryChange
  ): Boolean
  nuclearWorkload(input: NuclearWorkloadInput!): Workload
  office(input: OfficeInput!): Office
  officeDelete(id: ID!): Office
  onboardUpsert(input: OnboardInput!): OnboardAttributes
  personalAddressUpsert(
    input: PersonalAddressUpsertInput!
  ): PersonalAddressUpsertPayload
  personalContact(input: PersonalContactInput!): PersonalContact
  personnelRequestUpsert(
    """
    Id da requisição de pessoal criado no sistema de folha
    """
    externalId: String
    """
    Id do perfil do colaborador criado na Xerpa
    """
    profileId: ID
  ): PersonnelRequest
  profileCensus(inputs: [ProfileCensusInput!]!): [Profile]
  profileContractUpdate(input: ProfileContractInput): Profile
  profileCustomFieldsAssoc(input: ProfileCustomFieldsAssocInput!): Profile
  profileIdentificationUpdate(
    input: ProfileIdentificationInput
  ): ProfileIdentificationUpdatePayload
  profileIntegrationStatus(
    message: String
    partnerHash: String!
    partnerInsertedAt: NaiveDatetimeUsec!
    partnerProfileId: String!
    profileGuid: String!
    success: Boolean!
  ): ProfileIntegrationStatus
  profileQualificationDataUpsert(
    input: ProfileQualificationDataInput
  ): ProfileQualificationDataPayload
  requestContactVerificationCode(contactId: ID!): VerificationCode
  resetProfileVacation(profileId: ID!): Profile
  resetVacations(companyId: ID!): Company
  revokeAccess(companyId: ID!, profileId: ID!): Profile
  """
  Insere credenciais para integracao com SAT Rotas
  """
  satRotasCreate(
    input: SatRotasConfigurationInput!
  ): SatRotasConfigurationStatus
  """
  Apaga a configuracao da SAT Rotas
  """
  satRotasDelete(companyId: ID!): SatRotasConfigurationStatus
  setCompanyCustomization(
    companyId: Int!
    coverImageUrl: String!
    loginBackgroundImageUrl: String!
    logoImageUrl: String!
    primaryColor: String!
    secondaryColor: String!
    tmpCoverImageUrl: String
    tmpLoginBackgroundImageUrl: String
    tmpLogoImageUrl: String
  ): Company
  setCompanyPlan(companyId: ID!, plan: XerpaPlan!): Company
  setLastDay(lastDay: Date!, profileId: ID!): WorkPeriodConfig
  setPaystubCapability(capability: PaystubCapability!, id: ID!): Company
  setTimeCalculatorRulesetProfiles(
    companyId: ID!
    startOn: Date!
  ): SetTimeCalculatorRulesetProfilesResult
  """
  Setup de integração Docusign
  """
  setupDocusignIntegration(companyId: ID!): CompanyProvider
  """
  Sincroniza a resposta da SAT
  """
  syncRoute(companyId: ID!, profileId: ID!): ProfileTransportIntegration
  timeClockImportCommit(input: ID!): TimeClockImportResult
  timeClockImportCreate(
    input: TimeClockImportCreateInput!
  ): TimeClockImportResult
  tokenDelete(id: ID!): Token
  tokenGenerate: Token
  union(input: UnionInput!): Union
  updateCompany(id: ID!, input: CompanyInput!): Company
  updateCompanyFeatures(features: [String!]!, id: ID!): Company
  updateCostCenter(input: UpdateCostCenterInput!): CostCenter
    @deprecated(reason: "Use cost_center instead")
  updateCpf(input: DocumentCpfUpsertInput!): DocumentCpfUpsertPayload
  updateDepartment(input: UpdateDepartmentInput!): Department
    @deprecated(reason: "Use department instead")
  updateExternalAssociations(
    input: UpdateExternalAssociationsInput!
  ): ObjectWithExternalAssociations
  updateRg(input: DocumentRgUpsertInput!): DocumentRgUpsertPayload
  updateUnion(input: UpdateUnionInput!): Union
    @deprecated(reason: "Use union instead")
  updateWorkload(input: UpdateWorkloadInput!): Workload
    @deprecated(reason: "Use workload instead")
  uploadBegin(input: UploadInput!): [UploadInfo]
  uploadDelete(input: UploadDeleteInput!): [UploadDeleteReply]
  uploadDone(input: UploadDoneInput!): Attachment
  upsertCompanyCustomEmail(input: CompanyCustomEmailInput!): CompanyCustomEmail
  validateImage(extensions: [String!], url: String!): ValidateImagePayload
  visualizationRoleAssociateProfileUpdate(
    input: VisualizationRoleAssociateProfileInput!
  ): Profile
  visualizationRoleDelete(
    input: VisualizationRoleInputDelete!
  ): [VisualizationRole]
  visualizationRoleUpsert(input: VisualizationRoleInput!): VisualizationRole
  workPeriodAcceptAll(
    input: WorkPeriodAcceptAllInput!
  ): WorkPeriodAcceptAllReply
  workPeriodArchive(workPeriodId: ID!): WorkPeriod
  workPeriodClose(workPeriodId: ID!): WorkPeriod
  workPeriodProfileConfig(
    input: WorkPeriodProfileConfigInput!
  ): WorkPeriodConfig
  workPeriodProfileSignatures(
    input: WorkPeriodProfilesInput!
  ): [WorkPeriodProfile]
  workdayAdjust(input: WorkdayInput): Workday
  workload(input: WorkloadInput!): Workload
  workloadDelete(id: ID!): Workload
  xerpayResetPasswordMutation(cpf: String): Boolean
}

type RootQueryType {
  address(zipCode: String!): Address
  banks: [Bank]
  batch(companyId: ID!, type: BatchType!): [Batch]
  cbos: [Cbo]
  cities(stateId: ID!): [City]
  company(id: ID!): Company
  constants(typeName: String!): [Constant]
    @deprecated(
      reason: "Use introspection (__type) or enumDescriptions instead."
    )
  countries: [Country]
  enumDescriptions: EnumDescriptions
  getAllImportFiles(companyGuid: String!): [ImportFile]
  getImportFileById(companyId: String!, id: String!): ImportFileById
  journeyTemplates(companyId: ID!): [JourneyTemplate]
  lookerEmbedUrl(
    companyId: ID!
    embedUrl: String!
    models: [String]!
  ): LookerEmbedUrl
  period(id: ID!): Period
  periods(companyId: ID!): [Period]
  profile(id: ID!): Profile
  profileByGuid(guid: String!): Profile
  profileByUsername(username: Email!): Profile
  """
  Busca entradas de ponto originais vindas do arquivo AFD (Arquivo
  Fonte de Dados) dentro de um período para os PIS informados.

  A diferença em dias entre o começo e o final do período não deve
  ultrapassar 31 dias corridos.

  Ex:
  ```graphql
  {
    rawAfdEntries(
      companyId: "company:86ce5f40-8e9c-11e8-8d49-0242ac1a0007",
      pisList: ["97651815781"],
      startOn: "2018-01-05",
      endOn: "2018-01-06"
    ) {
      pis
      datetime
    }
  }
  ```
  """
  rawAfdEntries(
    """
    GUID da companhia.
    """
    companyId: ID!
    """
    Data de final do período consultado.
    """
    endOn: Date!
    """
    Lista de PIS a serem consultados.
    """
    pisList: [String!]!
    """
    Data de início do período consultado.
    """
    startOn: Date!
  ): [RawAfdEntry]
  states(companyId: ID, countryId: ID): [State]
  timeClockInfo(companyId: ID!): KairosTimeClock
  viewer: Viewer
  """
  Resultados da importação do .csv (total de sucessos e sucessos sem benefício)
  """
  xerpayImportResume(
    """
    id da importação em massa
    """
    batchJobId: Int!
    """
    id da empresa
    """
    companyId: Int!
  ): XerpayImportResumeResult
}

type RootSubscriptionType {
  documentCnhOcrProgress(profileGuid: ID!): DocumentCnhOcrProgressPayload
  documentRgCpfOcrProgress(profileGuid: ID!): DocumentRgCpfOcrProgressPayload
  generatingAttendanceRecords(workPeriodId: ID!): Progress
  workPeriodOverview(
    workPeriodId: ID!
  ): WorkPeriodSubscriptionOverviewWithSummaries
  workPeriodOverviewByDepartment(
    departmentId: ID!
    workPeriodId: ID!
  ): WorkPeriodSubscriptionOverviewByDepartment
  workPeriodOverviewByManager(
    managerId: ID!
    workPeriodId: ID!
  ): WorkPeriodSubscriptionOverviewByManager
  workPeriodProfileOverview(
    profileId: ID!
    workPeriodId: ID!
  ): WorkPeriodSubscriptionProfile
}

type RoteirizacaoLinhaFuncionario {
  cartao: String
  codLinha: String
  codTransporte: Int
  descricao: String
  desembarque: String
  desembarqueDistancia: String
  embarque: String
  embarqueDistancia: String
  nomeLinha: String
  sentido: String
  sequencia: Int
  tempo: String
  valor: String
}

type RouteSection {
  idaTempo: String
  idaValor: String
  """
  Listagem de linhas com ids da SAT Rotas, utilizados para justificar a recusa de uma rota
  """
  opcoesSat: [OpcaoSat]
  resultado: [RoteirizacaoLinhaFuncionario]
  transportes: [DetalhesTransporte]
  voltaTempo: String
  voltaValor: String
}

"""

"""
enum SalaryPeriod {
  """
  Por Dia
  """
  DAY
  """
  Por Hora
  """
  HOUR
  """
  Por Mês
  """
  MONTH
  """
  Por Tarefa
  """
  PIECE
  """
  Por Quinzena
  """
  SEMI_MONTH
  """
  Por Semana
  """
  WEEK
}

type SalaryPeriodDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: SalaryPeriod
}

input SatRotasConfigurationInput {
  """
  Id da empresa na Xerpa
  """
  companyId: ID!
  """
  Senha para autenticacao na SAT
  """
  password: String
  """
  Codigo da empresa na SAT
  """
  satCompanyId: Int
  """
  Usuario para autenticacao na SAT
  """
  user: String
}

type SatRotasConfigurationStatus {
  active: Boolean
}

type SatRotasJustificationTree {
  """
  Listagem de justificativas utilizadas na recusa de uma roteirizacao
  """
  justificativas: [Justificativa]
}

type Scale {
  days: [Day]
  endDate: Date
  id: ID
  overtime: ScaleOvertime
  pis: String
  profile: Profile
  startDate: Date
}

type ScaleOvertime {
  needsAdjustments: [Day]
  overtime: Overtime
}

"""

"""
enum SchoolDegreeType {
  """
  Bacharelado
  """
  BACHELOR
  """
  Doutorado
  """
  DOCTORATE
  """
  Ensino Fundamental I
  """
  ELEMENTARY_SCHOOL
  """
  Especialização
  """
  ESPECIALIZATION
  """
  Ensino Médio
  """
  HIGH_SCHOOL
  """
  Licenciatura
  """
  LICENCIATE
  """
  Mestrado
  """
  MASTER
  """
  MBA
  """
  MBA
  """
  Ensino Fundamental II
  """
  MIDDLE_SCHOOL
  """
  Pós-doutorado
  """
  RESEARCH_FELLOW
  """
  Tecnólogo
  """
  TECHNOLOGIST
  """
  Técnico de nível médio
  """
  TRADE_SCHOOL
}

"""

"""
enum SchoolDurationType {
  """
  Longa (acima de 360 horas)
  """
  LONG
  """
  Média (acima de 40 horas, até 360 horas)
  """
  MEDIUM
  """
  Curta (até 40 horas)
  """
  SHORT
}

"""

"""
enum SchoolSituationType {
  """
  Curso Concluído
  """
  CONCLUDED
  """
  Interrompido
  """
  INTERRUPTED
  """
  Cursando
  """
  ONGOING
}

type SearchAggregation {
  counts: [SearchAggregationCount]
  fieldName: String
}

type SearchAggregationCount {
  count: Int
  value: String
}

type SetTimeCalculatorRulesetProfilesResult {
  """
  Quantidade de colaboradores que tiveram ponto ajustado
  """
  numberProfilesAdjusted: String
}

type SignatureResult {
  results: [WorkPeriodProfile]
  totalHits: Int
}

"""

"""
enum SkinColor {
  """
  Amarela
  """
  AMARELA
  """
  Branca
  """
  BRANCA
  """
  Indígena
  """
  INDIGENA
  """
  Negra / Preta
  """
  NEGRA
  """
  Não Informado
  """
  NONE
  """
  Parda
  """
  PARDA
}

type SkinColorDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: SkinColor
}

type State {
  code: String
  country: Country
  id: ID
  name: String
}

type Statistics {
  headcount(period: PeriodInput!): [Headcount]
  paystub(args: PaystubStatisticsInput!): PaystubStatistics
  turnover(departmentId: ID, period: PeriodInput!): Turnover
  yearMonthBounds: [YearMonth]
}

type StepMessage {
  steps: [Steps]
  title: String
}

type Steps {
  contents: [Contents]
  title: String
}

"""

"""
enum StreetType {
  """
  Aeroporto
  """
  AEROPORTO
  """
  Alameda
  """
  ALAMEDA
  """
  Área
  """
  AREA
  """
  Avenida
  """
  AVENIDA
  """
  Campo
  """
  CAMPO
  """
  Chácara
  """
  CHACARA
  """
  Colônia
  """
  COLONIA
  """
  Condomínio
  """
  CONDOMINIO
  """
  Conjunto
  """
  CONJUNTO
  """
  Distrito
  """
  DISTRITO
  """
  Esplanada
  """
  ESPLANADA
  """
  Estação
  """
  ESTACAO
  """
  Estrada
  """
  ESTRADA
  """
  Favela
  """
  FAVELA
  """
  Fazenda
  """
  FAZENDA
  """
  Feira
  """
  FEIRA
  """
  Jardim
  """
  JARDIM
  """
  Ladeira
  """
  LADEIRA
  """
  Lago
  """
  LAGO
  """
  Lagoa
  """
  LAGOA
  """
  Largo
  """
  LARGO
  """
  Loteamento
  """
  LOTEAMENTO
  """
  Morro
  """
  MORRO
  """
  Núcleo
  """
  NUCLEO
  """
  Parque
  """
  PARQUE
  """
  Passarela
  """
  PASSARELA
  """
  Pátio
  """
  PATIO
  """
  Praça
  """
  PRACA
  """
  Quadra
  """
  QUADRA
  """
  Recanto
  """
  RECANTO
  """
  Residencial
  """
  RESIDENCIAL
  """
  Rodovia
  """
  RODOVIA
  """
  Rua
  """
  RUA
  """
  Setor
  """
  SETOR
  """
  Sítio
  """
  SITIO
  """
  Travessa
  """
  TRAVESSA
  """
  Trecho
  """
  TRECHO
  """
  Vale
  """
  VALE
  """
  Vereda
  """
  VEREDA
  """
  Via
  """
  VIA
  """
  Viaduto
  """
  VIADUTO
  """
  Viela
  """
  VIELA
  """
  Vila
  """
  VILA
}

type StreetTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: StreetType
}

"""

"""
enum SubmissionStatusType {
  """
  Erro autenticacao
  """
  AUTHENTICATION_FAILED
  """
  Email com resposta automatica
  """
  AUTO_RESPONDED
  """
  Documento assinado
  """
  COMPLETED
  """
  Documento recusado
  """
  DECLINED
  """
  Email recebido
  """
  DELIVERED
  """
  Documento requisitado
  """
  REQUESTED_DOCUMENT
  """
  Email enviado
  """
  SENT
}

type SubmissionStatusTypeDescription {
  value: SubmissionStatusType
}

"""

"""
enum TemplateDayType {
  DAYOFF
  DSR
  FIXED
  FLEXIBLE
}

type TemplateDayTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: TemplateDayType
}

type Thread {
  id: ID
  messages(from: ID, limit: Int): [Comment]
}

type Thumbnail {
  url: String
}

"""
Time in the format HH:MM:SS.
"""
scalar Time

type TimeClock {
  company: Company
  name: String
  serialNumber: String
}

input TimeClockImportCreateInput {
  afdFiles: [String]!
  companyId: ID!
}

type TimeClockImportFileOverview {
  entriesCount: Int
  entriesEndOn: Date
  entriesStartOn: Date
  profilesNotFoundCount: Int
  timeClock: TimeClock
}

type TimeClockImportResult {
  id: ID
  importFileOverview: [TimeClockImportFileOverview]
  pending: Boolean
  profilesNotFoundCount: Int
}

type Token {
  id: ID
  token: ID
}

type TokenDescription {
  company: Company
  description: String
  id: ID
  insertedAt: NaiveDatetimeUsec
}

type Transport {
  id: ID
  name: String
  type: TransportType
}

"""

"""
enum TransportIntegrationStatus {
  """
  Rota Aceita
  """
  ACCEPTED
  """
  Consulta Pendente
  """
  PENDING
  """
  Erro - Funcionario nao encontrado
  """
  PROFILE_NOT_FOUND
  """
  Rota Recebida
  """
  RECEIVED
  """
  Nao foi possivel calcular a rota
  """
  ROUTE_NOT_FOUND
  """
  Rota Rejeitada - Aguardando Nova Rota
  """
  WAITING_NEW_ROUTE
}

"""

"""
enum TransportType {
  """
  Vale-Combustível
  """
  FUEL_COUPOM
  """
  Estacionamento
  """
  PARKING
  """
  Vale-Transporte
  """
  PUBLIC
}

type TransportTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: TransportType
}

type Turnover {
  availableDepartments: [Constant] @deprecated(reason: "use known_departments")
  dataset: [TurnoverAggregation]
  knownDepartments: [Identifier]
}

type TurnoverAggregation {
  bucketDepartment: Identifier
  classic: TurnoverResult @deprecated(reason: "use turnover_classic")
  department: Constant @deprecated(reason: "use bucket_department")
  involuntary: TurnoverResult @deprecated(reason: "use turnover_involuntary")
  turnoverClassic: Float
  turnoverInvoluntary: Float
  turnoverVoluntary: Float
  voluntary: TurnoverResult @deprecated(reason: "use turnover voluntary")
  yearMonth: YearMonth
}

type TurnoverResult {
  value: Float
}

type Union implements ObjectWithExternalAssociations {
  abbreviation: String
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  partner: Partner
}

input UnionInput {
  abbreviation: String
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String!
  partner: PartnerInput
}

input UpdateCostCenterInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  id: ID!
  name: String!
}

input UpdateDepartmentInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  id: ID!
  name: String!
}

input UpdateExternalAssociationsInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput!
  id: ID!
  type: IntegrationFieldType!
}

input UpdateUnionInput {
  abbreviation: String
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  id: ID!
  name: String!
}

input UpdateWorkloadInput {
  companyId: ID!
  externalAssociations: ExternalAssociationsInput
  id: ID!
  name: String!
  schedule: WorkloadScheduleInput!
}

input UploadDeleteInput {
  workPeriodAttendanceRecord: [String!]
}

type UploadDeleteReply {
  objectId: String
}

input UploadDoneInput {
  handle: String!
  meta: UploadMeta
  parts: [UploadDoneParts]!
}

input UploadDoneParts {
  etag: String
  number: Int!
}

type UploadInfo {
  fieldName: String
  handle: String
}

input UploadInput {
  workPeriodAttendanceRecord: UploadWorkPeriodProfileInput
}

input UploadMeta {
  name: String
  origin: String
  type: String
}

type UploadUrl {
  rawUrl: String
  readUrl: String
  url: String
  writeUrl: String
}

input UploadWorkPeriodProfileInput {
  profileId: ID!
  workPeriodId: ID!
}

type ValidateImagePayload {
  signedUrl: String
}

type VerificationCode {
  contactId: ID
  profile: Profile
}

"""

"""
enum VerificationStatus {
  """
  Verificação Pendente
  """
  PENDING_VERIFICATION
  """
  Não verificado
  """
  UNVERIFIED
  """
  Verificado
  """
  VERIFIED
}

type VerificationStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: VerificationStatus
}

type Viewer {
  profile: Profile
}

"""

"""
enum VisaType {
  """
  Asilado
  """
  ASYLEE
  """
  Beneficiado pelo acordo entre países do Mercosul
  """
  BENEFITED_BY_MERCOSUL_AGREEMENT
  """
  Beneficiado pelo Tratado de Amizade, Cooperação e Consulta entre a República Federativa do Brasil e a República Portuguesa
  """
  BENEFITED_BY_TREATY_WITH_PORTUGUESE_REPUBLIC
  """
  Dependente de agente diplomático e/ou consular de países que mantém convênio de reciprocidade para o exercício de atividade remunerada no Brasil
  """
  DIPLOMATIC_OR_CONSULAR_AGENT
  """
  Deficiente físico e com mais de 51 anos
  """
  DISABLED_AND_OLDER_THAN_51_YEARS_OLD
  """
  Com residência provisória e anistiado, em situação irregular
  """
  IRREGULAR_WITH_TEMPORARY_RESIDENCE_AND_AMNESTIED
  """
  Residente fora do Brasil
  """
  LIVING_OUTSIDE_BRAZIL
  """
  Nenhum
  """
  NONE
  """
  Visto permanente
  """
  PERMANENT
  """
  Refugiado
  """
  REFUGEE
  """
  Solicitante de Refúgio
  """
  REFUGEE_APPLICANT
  """
  Permanência no Brasil em razão de filhos ou cônjuge brasileiros
  """
  STAYING_FOR_BRAZILIAN_CHILDREN_OR_SPOUSE
  """
  Visto temporário
  """
  TEMPORARY
}

type VisaTypeDescription {
  value: VisaType
}

type VisualizationRole {
  """
  Lista de Unidades de Negócio relacionados a Role
  """
  businessUnits: [BusinessUnit]
  """
  Lista de Cnpjs relacionados a Role
  """
  cnpjs: [CompanyCnpj]
  """
  Lista de Departamentos relacionados a Role
  """
  departments: [Department]
  """
  Lista de Regimes de Contrato relacionados a Role
  """
  employmentContracts: [EmploymentContract]
  """
  Identificador único da Role
  """
  id: ID
  """
  Nome da Role
  """
  name: String
}

input VisualizationRoleAssociateProfileInput {
  """
  Identificador da Empresa
  """
  companyId: ID!
  """
  Identificador do colaborador
  """
  profileId: ID!
  """
  Identificador da role. Caso não enviado desassocia a role existe do colaborador
  """
  visualizationRoleId: ID
}

input VisualizationRoleInput {
  """
  Identificador da empresa
  """
  companyId: ID!
  """
  Lista de identificadores de Regime de Contrato
  """
  employmentContracts: [EmploymentContract]
  """
  Lista de identificadores de Cnpjs
  """
  guidsCnpj: [ID]
  """
  Identificador obrigatório em casos de atualizaçẽo
  """
  id: ID
  """
  Lista de identificadores de Unidades de Negócio
  """
  idsBusinessUnit: [ID]
  """
  Lista de identificadores de Departamento
  """
  idsDepartment: [ID]
  """
  Nome da role. Requerido ser valor alfa numérico
  """
  name: String!
}

input VisualizationRoleInputDelete {
  """
  Identificador da empresa
  """
  companyId: ID!
  """
  Identificador da role
  """
  id: ID!
}

type Voter {
  attachments: VoterAttachments
  """
  Número do título de eleitor
  """
  number: String
  """
  Data de último OCR.
  """
  scanDate: Date
  """
  Campos que vieram de OCR.
  """
  scannedFields: [String]
  """
  Seção eleitoral.
  """
  section: String
  """
  Unidade Federativa.
  """
  state: State
  """
  Zona eleitoral.
  """
  zone: String
}

type VoterAttachments {
  frontImage: Attachment
}

type Webhook {
  events: [WebhookEvent]
  id: ID
  token: String
  url: String
}

type WebhookEvent {
  name: Events
}

input WebhookInput {
  companyId: ID!
  events: [Events!]!
  id: ID
  token: String!
  url: String!
}

"""

"""
enum Weekday {
  """
  Sexta-feira
  """
  FRIDAY
  """
  Segunda-feira
  """
  MONDAY
  """
  Sábado
  """
  SATURDAY
  """
  Domingo
  """
  SUNDAY
  """
  Quinta-feira
  """
  THURSDAY
  """
  Terça-feira
  """
  TUESDAY
  """
  Quarta-feira
  """
  WEDNESDAY
}

type WeekdayDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: Weekday
}

type WorkPeriod {
  """
  Path to download ACJEF file
  """
  acjefPath: String
  """
  Path to download AFDT file
  """
  afdtPath: String
  allAttendanceRecordsSigned: Boolean
  archivedOn: Date
  canBeClosed: Boolean
  closedOn: Date
  department(id: ID!): AggregationBucket
  departmentsOverview: [WorkPeriodOverviewByDepartment]
  endOn: Date
  filter(
    """
    Criterion used to filter the profiles.
    Can be either `department=<department_id>` or `manager=<manager_id>`.
    """
    query: String!
  ): FilteredWorkPeriod
  generatingAttendanceRecords: Boolean
  id: ID
  manager(id: ID!): AggregationBucket
  managersOverview: [WorkPeriodOverviewByManager]
  profileCount: Int
  rawAttendanceRecordsObjectIdsByDepartment(ids: [ID]!): [String]
  rawAttendanceRecordsObjectIdsByManager(ids: [ID]!): [String]
  signatureCount: Int
  signatures(page: Int, query: String!, size: Int): SignatureResult
  startOn: Date
  status: WorkPeriodStatus
  """
  Path to download time summary
  """
  timeSummaryPath: String
  viewerCanArchive: Boolean
  viewerCanClose: Boolean
  viewerCanDownloadTreatmentFiles: Boolean
}

input WorkPeriodAcceptAllInput {
  absenceIds: [ID]!
  profileId: ID!
  workPeriodId: ID!
  workdayIds: [ID]!
}

type WorkPeriodAcceptAllReply {
  done: WorkPeriodFilterResult
  failAbsences: [Absence]
  failWorkdays: [Workday]
}

type WorkPeriodConfig {
  incompleteProfiles: IncompleteProfiles
  missingProfiles: MissingProfiles
  profilesMissingLastDay: ProfilesMissingLastDay
}

type WorkPeriodFilterResult {
  absences: [Absence]
  profile: Profile
  timeBalanceInMinutes: Int
  workdays: [Workday]
}

type WorkPeriodFilterResults {
  results: [WorkPeriodFilterResult]
  totalHits: Int
}

type WorkPeriodIncompleteProfile {
  paginationToken: ID
  profile: Profile
}

input WorkPeriodInput {
  endOn: Date!
  startOn: Date!
}

type WorkPeriodListOverview {
  profilesCount: Int
  profilesWithAbsencesCount: Int
}

type WorkPeriodListView {
  endOn: Date
  id: ID
  overview: WorkPeriodListOverview
  startOn: Date
  status: WorkPeriodStatus
}

type WorkPeriodOverview {
  """
  The total number of profiles in this group (same as profiles_pending_count + profiles_done_count)
  """
  profilesCount: Int
  """
  The total number of profiles without any issues
  """
  profilesDoneCount: Int
  """
  The total number of profiles that are being offboarded during the work period
  """
  profilesOnOffboardCount: Int
  """
  The total number of profiles that are in vacation during some part of the work period
  """
  profilesOnVacationCount: Int
  """
  The total number of profiles with at least one issue
  """
  profilesPendingCount: Int
  """
  The number of profiles with all absences approved
  """
  profilesWithAbsencesDoneCount: Int
  """
  The number of profiles with at least one pending absence
  """
  profilesWithAbsencesPendingCount: Int
  """
  The number of profiles with all workdays done
  """
  profilesWithWorkdaysDoneCount: Int
  """
  The number of profiles with at least one workday requiring review
  """
  profilesWithWorkdaysPendingCount: Int
  """
  Total time balance in minutes
  """
  timeBalanceInMinutes: Int
}

type WorkPeriodOverviewByDepartment {
  department: AggregationBucket
  overview: WorkPeriodOverview
}

type WorkPeriodOverviewByManager {
  manager: AggregationBucket
  overview: WorkPeriodOverview
}

type WorkPeriodProfile {
  attendanceRecordAttachment: Attachment
    @deprecated(reason: "Use `signed_attendance_record instead.`")
  isSigned: Boolean
  profile: Profile
  rawAttendanceRecordAttachment: Attachment
  signedAttendanceRecordAttachment: Attachment
}

input WorkPeriodProfileConfigInput {
  companyId: ID!
  name: String
  pis: String!
  profileId: ID
}

input WorkPeriodProfileInput {
  isSigned: Boolean!
  profileId: ID!
}

input WorkPeriodProfilesInput {
  workPeriodId: ID!
  workPeriodProfiles: [WorkPeriodProfileInput]!
}

"""

"""
enum WorkPeriodStatus {
  """
  Arquivado
  """
  ARCHIVED
  """
  Assinando
  """
  CLOSED
  """
  Tratando
  """
  OPEN
}

type WorkPeriodStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: WorkPeriodStatus
}

type WorkPeriodSubscriptionOverview {
  """
  The total number of profiles in this group (same as profiles_pending_count + profiles_done_count)
  """
  profilesCount: Int
  """
  The total number of profiles without any issues
  """
  profilesDoneCount: Int
  """
  The total number of profiles that are being offboarded during the work period
  """
  profilesOnOffboardCount: Int
  """
  The total number of profiles that are in vacation during some part of the work period
  """
  profilesOnVacationCount: Int
  """
  The total number of profiles with at least one issue
  """
  profilesPendingCount: Int
  """
  The number of profiles with all absences approved
  """
  profilesWithAbsencesDoneCount: Int
  """
  The number of profiles with at least one pending absence
  """
  profilesWithAbsencesPendingCount: Int
  """
  The number of profiles with all workdays done
  """
  profilesWithWorkdaysDoneCount: Int
  """
  The number of profiles with at least one workday requiring review
  """
  profilesWithWorkdaysPendingCount: Int
  """
  Total time balance in minutes
  """
  timeBalanceInMinutes: Int
}

type WorkPeriodSubscriptionOverviewByDepartment {
  department: Department
  overview: WorkPeriodSubscriptionOverview
  summaries: [WorkPeriodSubscriptionProfile]
}

type WorkPeriodSubscriptionOverviewByManager {
  manager: Profile
  overview: WorkPeriodSubscriptionOverview
  summaries: [WorkPeriodSubscriptionProfile]
}

type WorkPeriodSubscriptionOverviewWithSummaries {
  overview: WorkPeriodSubscriptionOverview
  summaries: [WorkPeriodSubscriptionProfile]
}

type WorkPeriodSubscriptionProfile {
  profileId: ID
  timeBalanceInMinutes: Int
}

type Workday {
  absences: [Absence!]
  """
  The total time in minutes covered by absences in this workday.
  """
  absencesTimeInMinutes: Int
  """
  The version of this workday's adjustment.
  """
  adjustmentVersion: Int
  """
  Whether this workday can be approved by the manager (or a DP acting as the manager).
  """
  canBeApproved: Boolean
  canBeSignedOff: Boolean @deprecated(reason: "no longer available")
  comments: Thread
  """
  All entries for this workday
  """
  entries: [WorkdayEntry]
  entriesPositions: [EntryPosition]
  entriesSummary: EntriesSummary!
  history: WorkdayHistory
  id: ID
  """
  Whether this workday is on a holiday.
  """
  isHoliday: Boolean
  """
  Whether this workday's weekday in described by the workload.
  """
  isInWorkload: Boolean
  """
  Whether this workday is on a vacation day.
  """
  isVacation: Boolean
  """
  Next workday pending review by the manager (or a DP acting as the manager).
  """
  nextPendingManagerReview: Workday
  """
  Next workday pending review by its owner.
  """
  nextPendingUserReview: Workday
  overtime: Boolean
  """
  Whether this workday needs to be reviewed by the manager (or a DP acting as the manager).
  """
  pendingManagerReview: Boolean @deprecated(reason: "no longer available")
  pendingUserReview: Boolean @deprecated(reason: "no longer available")
  """
  The reference date, i.e. the date this workday starts at.
  """
  referenceDate: Date
  status: WorkdayStatus
  summaryMessage: String
  """
  Daily hour balance according to workday and entries
  """
  timeBalanceInMinutes: Int
  undertime: Boolean
  viewerCanAdjust: Boolean
  viewerCanApprove: Boolean
  viewerCanSignOff: Boolean @deprecated(reason: "no longer available")
  workPeriod: ProfileWorkPeriod
  """
  The workload configuration for this workday
  """
  workload: WorkdayWorkload
}

type WorkdayEntry {
  date: Date
  editReason: String
  id: ID
  time: Time
  type: WorkdayEntryType
}

input WorkdayEntryInput {
  date: Date
  delete: Boolean
  editReason: String
  id: ID
  time: Time
  type: WorkdayEntryType
}

"""

"""
enum WorkdayEntryType {
  """
  Incluída
  """
  ADDED
  """
  Desconsiderada
  """
  DISREGARDED
  """
  Original
  """
  ORIGINAL
}

type WorkdayEntryTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: WorkdayEntryType
}

type WorkdayHistory {
  what: WorkdayHistoryAction
  when: NaiveDatetimeUsec
  who: PublicProfile
}

"""

"""
enum WorkdayHistoryAction {
  """
  Ajustou
  """
  ADJUSTED
  """
  Aprovou
  """
  APPROVED
}

type WorkdayHistoryActionDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: WorkdayHistoryAction
}

input WorkdayInput {
  approve: WorkdayVersionInput
  entries: [WorkdayEntryInput!]
  id: ID!
  signOff: WorkdayVersionInput
}

"""

"""
enum WorkdayStatus {
  """
  Aprovados
  """
  APPROVED
  """
  Para revisar
  """
  DEVIATED
  """
  Dias corretos
  """
  DONE
  """
  Sem classificação
  """
  IGNORED
  """
  Para corrigir
  """
  INCONSISTENT
  """
  Faltas
  """
  MISSED
  """
  Para aprovar
  """
  PENDING
}

type WorkdayStatusDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: WorkdayStatus
}

input WorkdayVersionInput {
  """
  Version of the workday adjustment being approved. If this changes, the approval fails.
  """
  adjustmentVersion: Int!
}

type WorkdayWorkload {
  loadInMinutes: Int
  periods: [WorkloadDescriptionPeriod]
  regimen: String
}

type Workload implements ObjectWithExternalAssociations {
  company: Company
  externalAssociations: ExternalAssociations
  id: ID
  name: String
  schedule: WorkloadSchedule
  type: WorkloadType
}

type WorkloadBoundaries {
  endDate: NaiveDatetimeUsec
  startDate: NaiveDatetimeUsec
}

type WorkloadDescription {
  checkin: Time @deprecated(reason: "use periods")
  checkout: Time @deprecated(reason: "use periods")
  id: ID
  intervalBegin: Time @deprecated(reason: "use periods")
  intervalEnd: Time @deprecated(reason: "use periods")
  periods: [WorkloadDescriptionPeriod]
  weekdays: [Weekday]
}

input WorkloadDescriptionInput {
  checkin: Time
  checkout: Time
  id: ID
  intervalBegin: Time
  intervalEnd: Time
  periods: [WorkloadDescriptionPeriodInput]
  weekdays: [Weekday]!
}

type WorkloadDescriptionPeriod {
  checkin: Time
  checkout: Time
}

input WorkloadDescriptionPeriodInput {
  checkin: Time!
  checkout: Time!
}

input WorkloadInput {
  companyId: ID
  externalAssociations: ExternalAssociationsInput
  id: ID
  name: String!
  schedule: WorkloadScheduleInput!
}

type WorkloadNuclearDescription {
  id: ID
  intervalDurationInMinutes: Int
  loadInMinutes: Int
  numIntervals: Int
  outerCheckin: Time
  outerCheckout: Time
  toleranceInMinutes: Int
  weekdays: [Weekday]
}

type WorkloadSchedule {
  description: [WorkloadDescription]
  load: Int @deprecated(reason: "use load_in_minutes")
  loadInMinutes: Int
  nuclearDescriptions: [WorkloadNuclearDescription]
  regimen: String
}

input WorkloadScheduleInput {
  description: [WorkloadDescriptionInput]!
  load: Int
  regimen: String
}

"""

"""
enum WorkloadType {
  """
  Fixa
  """
  FIXED
  """
  Flexível
  """
  NUCLEAR
}

type WorkloadTypeDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: WorkloadType
}

"""

"""
enum XerpaPlan {
  """
  Plano completo / limite de 20 usuários
  """
  FREEMIUM
  """
  Plano completo
  """
  FULL
  """
  Plano hollerith
  """
  PAYSTUB
}

type XerpaPlanDescription {
  code: String @deprecated(reason: "Only for interop. Use enum values instead.")
  label: String
  name: String
  value: XerpaPlan
}

type XerpayImportResumeResult {
  """
  contador que reflete o número de colaboradores que foram NÃO foram importados com sucesso na importação em massa informada
  """
  countImportError: Int
  """
  contador que reflete o número de colaboradores que foram importados com sucesso na importação em massa informada
  """
  countImportSuccess: Int
  """
  contador que reflete o número de colaboradores que ainda precisam de liberação no benefício na importação em massa informada
  """
  countPendingBenefit: Int
  """
  contador que reflete o número de colaboradores que estavam na planilha de importação em massa
  """
  countTotalImport: Int
}

type YearMonth {
  month: Month!
  year: Int!
}

input YearMonthInput {
  month: Month!
  year: Int!
}
